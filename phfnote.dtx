% \iffalse meta-comment
%
% Copyright (C) 2016 by Philippe Faist <philippe.faist@bluewin.ch>
% -------------------------------------------------------
% 
% This file may be distributed and/or modified under the
% conditions of the LaTeX Project Public License, either version 1.3
% of this license or (at your option) any later version.
% The latest version of this license is in:
%
%    http://www.latex-project.org/lppl.txt
%
% and version 1.3 or later is part of all distributions of LaTeX 
% version 2005/12/01 or later.
%
% \fi
%
% \iffalse
%<*driver>
\ProvidesFile{phfnote.dtx}
%</driver>
%<package>\NeedsTeXFormat{LaTeX2e}[2005/12/01]
%<package>\ProvidesPackage{phfnote}
%<*package>
    [2016/04/21 v1.0 phfnote package]
%</package>
%
%<*driver>
\documentclass{ltxdoc}
\usepackage{xcolor}
\usepackage{lipsum}
\usepackage[preset=pkgdoc]{phfnote}

\phfnoteSaveDefs{verbatimstuff}{verbatim,@verbatim,endverbatim}

\usepackage{tcolorbox}% includes {verbatim} package, so hack around that...
\newtcolorbox{pkgnote}{colback=blue!5!white,colframe=blue!5!white,toptitle=1.5ex,coltitle=blue!50!black,fonttitle=\bfseries,title={NOTE}}
\newtcolorbox{pkgwarning}{colback=red!5!white,colframe=red!5!white,toptitle=1.5ex,coltitle=red!50!black,fonttitle=\bfseries,title={WARNING}}

\makeatletter
\newsavebox\phfnoteDocVirtualPage@contents
\newenvironment{phfnoteDocVirtualPage}{%
  \par%
  \begingroup%
  \makeatletter%
  \begin{lrbox}{\phfnoteDocVirtualPage@contents}%
  \begin{minipage}{12cm}\vspace*{0.5cm}\relax%
    \def\rmdefault{cmr}\def\sfdefault{cmbr}\normalfont%
    \def\shortlipsum{Lorem ipsum dolor sit amet, consectetuer
      adipiscing elit. Ut purus elit, vestibulum ut, placerat ac,
      adipiscing vitae, felis. Curabitur dictum gravida
      mauris. Nam arcu libero, nonummy eget, consectetuer id,
      vulputate a, magna.}%
    \def\@title{Notes on Lambda-Majorization}%
    \def\@author{Ph. Faist}%
    \def\@date{23.12.2011}%
    \def\notetitletopspace{0pt}%
    \def\notetitlefont{\sffamily\bfseries}%
    \def\morepagecontents{\par\vspace{1em}\centering\ldots}%
    \ignorespaces%
  }%
  {%
  \end{minipage}%
  \end{lrbox}%
  %%\centering%
  \begin{tcolorbox}[text width=6cm,sharp corners,%
    before={\par\vspace{5pt}\centering\nopagebreak\parindent=0pt},after={\par\vspace{5pt}},%
    leftrule=0.4pt,toprule=0.4pt,rightrule=0.6pt,bottomrule=0.6pt,%
    colframe=black,colback=white]%
    \scalebox{0.5}{\usebox{\phfnoteDocVirtualPage@contents}}%
  \end{tcolorbox}%
  %%\par%
  \endgroup%
}
\makeatother

\def\RevTeX{\textsc{Rev}\TeX}

\EnableCrossrefs
\CodelineIndex
\RecordChanges
\phfnoteRestoreDefs{verbatimstuff}
\begin{document}
  \DocInput{phfnote.dtx}
\end{document}
%</driver>
% \fi
%
% \CheckSum{0}
%
% \CharacterTable
%  {Upper-case    \A\B\C\D\E\F\G\H\I\J\K\L\M\N\O\P\Q\R\S\T\U\V\W\X\Y\Z
%   Lower-case    \a\b\c\d\e\f\g\h\i\j\k\l\m\n\o\p\q\r\s\t\u\v\w\x\y\z
%   Digits        \0\1\2\3\4\5\6\7\8\9
%   Exclamation   \!     Double quote  \"     Hash (number) \#
%   Dollar        \$     Percent       \%     Ampersand     \&
%   Acute accent  \'     Left paren    \(     Right paren   \)
%   Asterisk      \*     Plus          \+     Comma         \,
%   Minus         \-     Point         \.     Solidus       \/
%   Colon         \:     Semicolon     \;     Less than     \<
%   Equals        \=     Greater than  \>     Question mark \?
%   Commercial at \@     Left bracket  \[     Backslash     \\
%   Right bracket \]     Circumflex    \^     Underscore    \_
%   Grave accent  \`     Left brace    \{     Vertical bar  \|
%   Right brace   \}     Tilde         \~}
%
%
% \changes{v1.0}{2016/04/20}{Initial version}
%
% \GetFileInfo{phfnote.dtx}
%
% \iffalse Bypass indexing for following commands: \fi
% \DoNotIndex{\newcommand,\newenvironment,\renewcommand,\long,\def,\edef,\gdef,\xdef,\if,\else,\fi,\par,\relax,\vspace,\vskip,\hspace,\hskip,\vbox,\hbox}
% 
% \title{The \textsf{phfnote} package\thanks{\itshape
% This document corresponds to
% \textsf{phfnote}~\fileversion, dated \filedate. It is part of
% the Part of the
% \href{https://github.com/phfaist/phfqitltx/}{\textsf{phfqitltx}}
% package suite, see \url{https://github.com/phfaist/phfqitltx}.}}
% \author{Philippe Faist\quad\email{philippe.faist@bluewin.ch}}
%
% \maketitle
%
% \begin{abstract}
%   \textsf{phfnote}---A handy \LaTeX{} class for typesetting short notes and
%   medium-length reports, full of goodies to make it look just right.
% \end{abstract}
%
% \phantomsection\label{sec:toc}
% \inlinetoc
%
% \section{Introduction}
%
% Have you ever thought, ``let me write up these short notes using \LaTeX,'' but
% then disliked the default style of the |article| class?  Have you ever asked
% yourself why half the page should be taken up by the title?  Yes?  Then
% welcome to |phfnote|.
%
% The package |phfnote| provides basic formatting for short documents, such as
% notes on a specific topic, short documentation, or quick memos.  It aims to
% cover all basic needs for such purposes: include a standard set of relevant
% packages, a nice title which doesn't take up too much space, better page
% margin sizes, and some basic styling to make the note look nicer.  At the same
% time, it is highly configurable so that nothing is really unchangeable.  And
% all overridden features can be restored individually to their class-provided
% defaults.
%
% This package has been designed to work optimally along with the |article|
% document class, but in principle any relatively standard \LaTeX{} class should
% work.  Notes can be typeset in \index{two-column} two-column mode with the
% |twocolumn| option of for example the |article| class.  Settings such as the
% page margins and font goodies are automatically adapted to look best according
% to the standard document font size (10pt, 11pt, or 12pt).
%
% Be aware that this package is not meant as a full-fledged formatting class for
% complicated articles.  For that, you should use a specialized class such as
% \RevTeX.\footnote{See \url{https://journals.aps.org/revtex}}
%
% In the following, we detail individual features of this class, and explain how
% to activate, deactivate, and customize them.
%
%
% \section{Basic Usage}
%
% \subsection{Loading the Package}
%
% You can get started with the minimal template:
%
% \begin{verbatim}
% \documentclass[11pt,a4paper]{article}
% \usepackage{phfnote}
%
% \begin{document}
% \title{Title of my notes}
% \author{Me}
% \date{\today}
% \maketitle
%
% ...
%
% \end{document}
% \end{verbatim}
%
% The package |phfnote| introduces its default note formatting style, with a
% more compact title, and some formatting adjustments in the text and section
% headings.
%
% \subsection{Presets}
% \label{sec:presets}
%
% There are a number of package options which can be provided to activate,
% deactivate or adjust the formatting.  The most straightforward way of changing
% the formatting is to use \emph{presets}.
%
% Presets are processed immediately when given in the package option list,
% meaning that their position in the list is meaningful.  For example, the
% option list
% \begin{verbatim}
%   \usepackage[title=small,preset=article,par=skip]{phfnote}
% \end{verbatim}
% will set |title=small| only if it is not overridden by the |article| preset,
% but will enforce |par=skip| in any case.  You may in theory load several
% presets, e.g. |preset=sfnote,preset=article|, but this is essentially useless
% since presets tend to set a wide range of settings such that in any case the
% last preset specified is effectively applied.
%
% First, there is a set of presets which are different alternative ``note''
% styles.  All the following define the note to have spacing between paragraphs
% and no first line indentation, use the default note title style, and use a
% wider page geometry.
%
% \begin{pkgoptions}
% \item[preset=sfnote] {\fontfamily{cmbr}\selectfont Format the note in \LaTeX'
%   sans-serif ``Computer Modern Bright'' font.  This is a nice, light, font for
%   short notes, but I find it more difficult to read at smaller font sizes or
%   in longer paragraphs.}
% \item[preset=sfssnote] {\fontfamily{cmss}\selectfont Format the note in
%   \LaTeX' default sans-serif font.  A very nice sans serif font.  It might
%   look heavy though, depending on your taste.}
% \item[preset=utopianote] {\fontfamily{futs}\selectfont Format the note in
%   Utopia font (by using the |fourier| package).  Perfectly to my taste for
%   documenting code for example, but a bit heavy for scientific documents I
%   find.}
% \item[preset=mnmynote] Format the note in Minion Pro font, with sans serif
%   text formatted with |MyriadPro| (professional fonts by Adobe which can be
%   used in \LaTeX{} with the |MinionPro| and |MyriadPro| packages\footnote{See
%   \url{https://github.com/sebschub/FontPro}; the fonts themselves ship with
%   some Adobe Products}).  These beautiful fonts can be used for any purpose.
% \end{pkgoptions}
% 
% Based on |utopianote|, the preset |pkgdoc| combines additional definitions to
% aid in documenting \LaTeX{} packages.
% \begin{pkgoptions}
% \item[preset=pkgdoc] Basic formatting and settings for documenting \LaTeX{}
%   packages. This preset was used for the current document.
% \end{pkgoptions}
%
% The following preset makes the document look more like an article.  There are
% some slight minor differences with respect to the default |article| class'
% title in the choice of formatting the title and text.
%
% \begin{pkgoptions}
% \item[preset=article] Sets a more title style closer to |article|'s default
%   title style (but slightly more compact) and sets paragraphs to indent with
%   no skip.
% \end{pkgoptions}
%
% The last preset, |reset|, guarantees that including this package is
% non-invasive, meaning that only new \LaTeX{} macros are made available without
% altering any appearance.  This is useful if you want to use a small feature
% provided by this package, but you already have all the page geometry, title,
% etc.\@ set up and want to make sure those aren't touched.
%
% \begin{pkgoptions}
% \item[preset=reset] Deactivates all features of this package by default.
%   Individual settings can still later be switched on via specific package
%   options.  Use this to activate only a specific set of features:
%   |[preset=reset,...]| will ensure that only the additional given features are
%   set.
%
%   This is safer than deactivating individually all other features, because in
%   the future we may add new features which may be on by default.  In this
%   case, the preset |reset| will guarantee all features to be deactivated.
% \end{pkgoptions}
%
% \section{Features}
%
% This package provides a large collection of small features, which, put all
% together, make the document look nicer (hopefully).  Let's go through these
% features, one by one.
%
% Note also that some features provided in the presets, such changing the
% document font, are not provided as individual features here.  This is because
% they may be set and customized directly using few lines of \LaTeX{} code or
% directly by including an external package.  In those cases, you may have a
% look at the preset's definition for inspiration (see \autoref{impl:presets}).
%
% For a summary of package options, see ...... .
%
%
% \subsection{Title Formatting}
% \label{sec:title-styles}
%
% \subsubsection{Title Styles}
% \label{sec:main-default-title-style}
%
% The |phfnote| package allows a set of alternative title styles.  By default,
% the |default| title style is used.  You may change this setting with the
% |title=...| package option.
%
% \begin{pkgoptions}
% \item[title=default] The default title style displays the title in large bold
%   sans serif font, left-aligned.  Below the title appears the information
%   about author and date, indented, followed by a horizontal rule.  It looks
%   like this:
%   \begin{phfnoteDocVirtualPage}
%     \notetitle@style@default\null \shortlipsum \morepagecontents
%   \end{phfnoteDocVirtualPage}
%   As you can see, it saves more space on the page compared to the default
%   article title.
%
% \item[title=small] A smaller title style which displays all the relevant
%   information on a single line.  This is useful for when even the default
%   title style appears too large.  It looks like this:
%   \begin{phfnoteDocVirtualPage}
%     \notetitle@style@small\null \shortlipsum \morepagecontents
%   \end{phfnoteDocVirtualPage}
%
% \item[title=article] Mimics the default title style from the |article| class,
%   but saves more space.  It looks like this:
%   \begin{phfnoteDocVirtualPage}
%     \vspace*{3em}\notetitle@style@article\null \shortlipsum \morepagecontents
%   \end{phfnoteDocVirtualPage}
%
% \item[title=] An empty argument to |title| instructs |phfnote| not to override
%   any title definition, thus preserving the default class title style.
%
%   Beware that some other title goodies, such as our more advanced |\thanks|
%   notes, or spacing adjustments for the abstract, will probably not work.
% \end{pkgoptions}
%
% \subsubsection{Title notes: \phfverb\thanks{} and \phfverb\thanksmark}
%
% \DescribeMacro{\thanks}
% Notes in the title can be introduced with the |\thanks| macro.  You may use
% this to specify an e-mail address, an affiliation, or any other more specific
% information.  |\thanks| may appear in all three title, authors and date.
%
% The appearance of this additional information depends on the title style.  In
% the default note title style, such thanks-notes appear directly below the
% title.  For example, with
% {\ttfamily|\|author\{Ph.\@ Faist|\|thanks\{|\|itshape Institute for Theoretical Physics, ETH Zurich\}\}}, you get:
% \begin{phfnoteDocVirtualPage}
%   \author{Ph. Faist\thanks{\itshape Institute for Theoretical Physics, ETH Zurich}}\relax
%   \notetitle@style@default\null \morepagecontents
% \end{phfnoteDocVirtualPage}
% whereas with the other styles, this information is typeset as regular footnotes.
%
% \leavevmode\marginpar{\raggedleft \phfverb\thanks\phfverb{[N]}}\relax
% You may specify an optional argument to |\thanks|, forcing the footnote to a
% specific number (it must be a number).  For example, with
% {\ttfamily|\|author\{Ph.\@ Faist|\|thanks[9]\{|\|itshape Institute for
% Theoretical Physics, ETH Zurich\}\}}, you get:
% \begin{phfnoteDocVirtualPage}
%   \author{Ph. Faist\thanks[9]{\itshape Institute for Theoretical Physics, ETH Zurich}}\relax
%   \notetitle@style@default\null \morepagecontents
% \end{phfnoteDocVirtualPage}
%
% \DescribeMacro{\thanksmark} |\thanksmark[N]| works with |\thanks| as
% |\footnotemark| works with |\footnote|.  It just displays the given number as
% a footnote mark.  In this way, you can have for example several shared
% affiliations:
% \begin{phfnoteDocVirtualPage}
%   \title{Notes about Stuff}
%   \date{25.12.2015}
%   \author{First Author\thanks[1]{\itshape Institute ABC}, Second Author\thanks[2]{\itshape Somewhere else},
%      and Third Author\thanksmark[1]}\relax
%   \notetitle@style@default\null \morepagecontents
% \end{phfnoteDocVirtualPage}
% the author code was:
% \begin{verbatim}
% \author{First Author\thanks[1]{\itshape Institute ABC},
%     Second Author\thanks[2]{\itshape Somewhere else},
%     and Third Author\thanksmark[1]}
% \end{verbatim}
%
% Unfortunately, you still have to provide the numbering manually.  On the other
% hand, this package is not meant to replace \RevTeX, so if you're writing a
% complicated article with many authors and affiliations, you probably shouldn't
% be using |phfnote| in the first place.
%
% \begin{pkgwarning}
%   The optional argument to |\thanks|, as well as the command |\thanksmark|,
%   are not made available if you don't use one of |\phfnote|'s title styles.
%
%   This behavior is such as to prevent interference with more advanced class
%   mechanisms, such as \RevTeX's.
% \end{pkgwarning}
%
%
% \subsection{Abstract and Table of Contents}
%
% \DescribeEnv{abstract}
% 
%
% \subsection{Predefined Package Sets}
% \label{sec:package-sets}
%
% \subsection{General Formatting and Appearance}
%
% \subsubsection{Font/Spacing Goodies}
%
% \subsubsection{Paragraph Spacing Presets}
% \label{sec:paragraph-spacing-presets}
%
% \subsubsection{Section Heading Formatting}
% \label{sec:section-heading-styling}
% Very limited styling. Use |titlesec| (or |sectsty|) directly if you
% want anything serious.
%
% Section fonts are customized using the |sectsty| package.  If this
% conflicts in your document, then use the |[secfmt={}]| package
% option and take care of section styling manually.
%
%
% \subsection{Page Geometry}
%
% \subsection{Presets}
%
%
% \subsection{URL Styles}
%
%
% \section{Summary of Package Options}
%
% \StopEventually{\vskip 2cm plus 2cm minus 2cm\relax\PrintChanges\vskip 2cm plus 2cm minus 2cm\relax\PrintIndex}
%
% \section{Implementation}
%
% Here comes the gory code.
%
% Let's start by loading the |kvoptions| package, which we need to
% parse the package options.
%
%    \begin{macrocode}
\RequirePackage{kvoptions}
%    \end{macrocode}
%
% Also load |etoolbox|, for various utilities.
%    \begin{macrocode}
\RequirePackage{etoolbox}
%    \end{macrocode}
%
% \subsection{Internal Generic Code}
%
% \begin{macro}{\phfnote@internal@execattribbs}
%   An internal general-purpose macro to execute all definitions given in list of
%   attributes.
%
%   Often, a list of attributes are given via a package option (e.g.\@ for the abstract),
%   and these attributes need to be executed, or implemented, in the order they are given.
%   This macro takes care of that.  Each possible attribute must be defined as a macro
%   with a common prefix, to which the attribute is appended.
%
%   The arguments are:
%   \begin{itemize}
%   \item |#1| = prefix to look for attributes (e.g.\@ |noteabstract@attr@|);
%   \item |#2| = a human-readable name of what |#1| represents, which is used in an error
%     message in case the required attribute is not found (e.g.\@ |{abstract attribute}|);
%   \item |#3| = the list of attributes specified by the user.
%   \end{itemize}
% 
%   For example, |\phfnote@internal@execattribs{noteabstract@attr@}|\hskip0pt\relax
%   |{abstract attribute}|\hskip0pt\relax |{noname,small}| causes the commands
%   |\noteabstract@attr@noname| and |\noteabstract@attr@small| to be invoked, in this
%   order.
%
%    \begin{macrocode}
\def\phfnote@internal@execattribs#1#2#3{%
  \@for\next:=#3\do{%
    \ifcsname #1\next\endcsname%
      \csname #1\next\endcsname%
    \else%
      \PackageWarning{phfnote}{Unknown #2: '\next'. Ignoring.}
    \fi
  }
}
%    \end{macrocode}
% \end{macro}
% 
% \subsection{Title Styling}
%
% See \autoref{sec:title-styles} for a description of the styles and which
% features are available.
%
% \subsubsection{First, some common simple definitions for our different styles}
%
% \begin{macro}{\notetitlefont}
% \begin{macro}{\notetitleauthorfont}
% \begin{macro}{\notetitledatefont}
%   These may be redefined to adapt the font of the title, author and date.
%
%    \begin{macrocode}
\newcommand{\notetitlefont}{\sffamily\bfseries}
\newcommand{\notetitleauthorfont}{}
\newcommand{\notetitledatefont}{\footnotesize}
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% 
% \begin{macro}{\notetitlebelowspace}
% \begin{macro}{\notetitletopspace}
%   These macros may be redefined to adjust spacing above and after the title.  They are
%   macros, not lengths, so they can be adjusted dynamically on the spot.
%    \begin{macrocode}
\newcommand{\notetitlebelowspace}{4mm}
\newcommand{\notetitletopspace}{-1.2cm}
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\notetitle@title}
%   Provide a ``long'' definition for |\title|, so that the title can have several
%   paragraphs.  Our style handles this by putting the title on several lines, and it can
%   be useful depending on how you want to format the title.
%
%   This macro will replace |\title| when a title style is actually selected in
%   |\phfnote@do@notetitle|.
%    \begin{macrocode}
\long\def\notetitle@title#1{\long\gdef\@title{#1}}
%    \end{macrocode}
% \end{macro}
% 
% \begin{macro}{\phfnote@title@checksetspace}
%   Some of our title styles require the |setspace| package.  This utility checks that
%   this package is loaded, and generates an error otherwise.
%
%   |#1| = the current title style name; this is required only for the error message.
%    \begin{macrocode}
\def\phfnote@title@checksetspace#1{%
  \ifdefined\singlespace\else%
    \PackageError{phfnote}{Note title style `#1' requires the
      `setspace' package to be loaded!  Please load it, or use a
      pkgset which loads it automatically}%
  \fi%
}
%    \end{macrocode}
% \end{macro}
%
% \subsubsection{Implementation of \phfverb\thanks{} and \phfverb\thanksmark}
%
% Here we provide a few fixes for the implementation of |\thanks|, both for our main
% `default' title style as well as for other simpler styles.  Our implementation supports
% |\thanks[N]{...}| and |\thanksmark[N]| as for footnotes.
%
% These newer implementations are only applied if one of our title styles is set.
% Otherwise, the class defaults are left (which may be needed, e.g., for \RevTeX).
%
% \paragraph{Implementation of \phfverb{\thanks} and friends for our main
% `default' title style}
%
% \begin{macro}{\phfnote@setupthanksmpfootnote}
%   Internal---called at the beginning of a |minipage| environment, it sets up necessary
%   stuff to support |\thanks| notes within the minipage, in a single paragraph.
%
%   Some of this code was taken or really inspired directly from |latex.ltx|.
%    \begin{macrocode}
\def\phfnote@setupthanksmpfootnote{%
%    \end{macrocode}
% 
% The |\thanks| macro is implemented as a |\footnote| in a minipage.  So we hack into the
% `mpfootnote' mechanism.
%    \begin{macrocode}
  \def\thempfootnote{\arabic{mpfootnote}}%
  \let\footnoterule\relax%
  \let\thanks\footnote%
%    \end{macrocode}
%
% All footnote material is stored in a macro |\phfnote@mpfootmaterial|, initially
% empty:\footnote{NOTE: this differs from how footnotes are usually treated (directly
% typeset into a vbox I think).  Not sure what the side-effects might be.  Because this is
% just for simple email/institute info/etc. in the title, hopefully this shouldn't have
% any serious consequences.}
%    \begin{macrocode}
  \def\phfnote@mpfootmaterial{}%
%    \end{macrocode}
% and locally define |\@mpfootnotetext| to store the footnote content into that buffer,
%    \begin{macrocode}
  \long\def\@mpfootnotetext##1{%
    \protected@edef\@currentlabel%
         {\csname p@mpfootnote\endcsname\@thefnmark}%
    \protected@edef\@tmpa{\protect\phfnote@mympfootnotemark{\@thefnmark}{##1}%
      \protect\phfnote@mpfootnoteglue}%
    \expandafter\g@addto@macro\expandafter\phfnote@mpfootmaterial%
      \expandafter{\@tmpa}%
  }%
%    \end{macrocode}
% 
% Also provide |\thanksmark|, so that we can refer to other thanks/footnote-marks.
%    \begin{macrocode}
  \def\thanksmark[##1]{\phfnote@mympfootnotemark{##1}}%
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\phfnote@finalizempfootnotes}
%   Macro to call at the end of a |minipage| environment, to ensure that all |\footnote|'s
%   (and thus |\thanks|'s) are properly formatted.
%
%   This simply takes all the tokens collected in |\phfnote@mpfootmaterial| (see just
%   above), and typesets it in the |\@mpfootins| box.  The latter is automatically typeset
%   by the minipage in |\end{minipage}|.
%  \begin{macrocode}
\def\phfnote@finalizempfootnotes{%
  \global\setbox\@mpfootins=\vbox{%
    \parskip=0pt\parindent=0pt\parshape 1 0.04\textwidth 0.96\textwidth\relax%
    \noindent\leavevmode%
    \reset@font\footnotesize%
    \phfnote@fmt@titlefootnotes%
    \phfnote@mpfootmaterial}%
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\phfnote@fmt@titlefootnotes}
% \begin{macro}{\phfnote@mympfootnotemark}
% \begin{macro}{\phfnote@mpfootnoteglue}
%   Some formatting utilities which can be overridden if you know what you're doing.
%   |\phfnote@fmt@titlefootnotes| allows you to override the font in which the
%   title-footnotes/thanks are typeset.  |\phfnote@mympfootnotemark| is responsible for
%   formatting its argument as a footnote mark, usually in superscript.
%   |\phfnote@mpfootnoteglue| is the glue which is used between two footnote texts (as
%   they are typeset in a single paragraph).
%    \begin{macrocode}
\def\phfnote@fmt@titlefootnotes{}
\def\phfnote@mympfootnotemark#1{\@textsuperscript{\normalfont#1}}
\def\phfnote@mpfootnoteglue{\hskip 1.2em plus 2em minus 0.5em\relax}
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% 
%
% \paragraph{For those not using the main `default' title style}
%
% We use \LaTeX's own |\thanks| mechanism, however we patch on the possibility for using
% |\thanks[N]{text}| and |\thanksmark[N]| for overriding the number which is used.
%
% \begin{macro}{\notetitle@thanksmark}
%   The |\thanksmark| is trivially implemented by |\footnotemark|.  Very handy indeed.
%
%   Again, this macro is only made available as |\thanksmark| when a title style is set in
%   |\phfnote@do@notetitle|.
%    \begin{macrocode}
\def\notetitle@thanksmark{\footnotemark}
%    \end{macrocode}
% \end{macro}
% 
% Start by saving the old |\thanks| macro, just in case.
%    \begin{macrocode}
\let\phfnote@old@thanks\thanks
%    \end{macrocode}
%
% \begin{macro}{\notetitle@thanks}
%   Now, we need to extend \LaTeX's |\thanks| to allow an optional argument as for
%   footnotes.  This macro will be renamed |\thanks| in |\phfnote@do@notetitle|.
%
%   Check whether there is an optional argument; if there is none we execute \LaTeX's
%   original thanks code (replicated here), otherwise, we specify the optional argument
%   explicitly at the relevant location in \LaTeX's implementation:
%    \begin{macrocode}
\def\notetitle@thanks{\@ifnextchar[\phfnote@thanks{\phfnote@thanks[]}}%]
\long\def\phfnote@thanks[#1]#2{%
  \if\relax\detokenize{#1}\relax%
%    \end{macrocode}
% 
% The optional argument is empty---just execute \LaTeX's original |\thanks| code,
% replicated here:
%    \begin{macrocode}
    \footnotemark%
    \protected@xdef\@thanks{\@thanks\protect\footnotetext[\the\c@footnote]{#2}}%
%    \end{macrocode}
% 
% Otherwise, execute \LaTeX's original |\thanks| code, but with the optional argument
% inserted wherever needed:
%    \begin{macrocode}
  \else% argument, pass on to sub-commands:
    \footnotemark[#1]%
    \protected@xdef\@thanks{\@thanks\protect\footnotetext[#1]{#2}}%
  \fi%
}
%    \end{macrocode}
% \end{macro}
% 
%
% \subsubsection{Title Styles Definition}
%
% See \autoref{sec:title-styles}........
%
% \paragraph{Title style: `default'}
%
% Implementation our main `default' title style.  See \autoref{sec:main-default-title-style}.
%
% \begin{macro}{\notetitle@style@default}
%    The default title style.  Nothing mysterious, hopefully.
%    \begin{macrocode}
\newcommand{\notetitle@style@default}{%
  \begingroup\par\raggedright%
    \phfnote@setupthanksmpfootnote%
    \vspace*{\notetitletopspace}%
    \phfnote@title@checksetspace{default}%
    \begin{minipage}{\textwidth}%
      \begin{singlespace}%
        \parskip=0pt\parindent=0pt\relax%
        {\let\phfnote@old@par\par%
          \def\par{\phfnote@old@par%
            \parskip=1.5ex\relax\parshape 1 0pt \textwidth\relax%
            \noindent}%
          \par%
          \Large  {\notetitlefont \@title}\par}%
        \vskip 2mm\relax
        \if\relax\detokenize\expandafter{\@author}\relax\else%
          \par\parshape 1 0.04\textwidth 0.96\textwidth\relax%
          {\notetitleauthorfont \@author}%
          \vskip 2mm\relax%
        \fi
        \if\relax\detokenize\expandafter{\@date}\relax\else%
          \par\parshape 1 0.04\textwidth 0.96\textwidth\relax%
          {\notetitledatefont \@date}
          \vskip 2mm\relax%
        \fi
        \global\let\@thanks\@empty%
        \phfnote@finalizempfootnotes%
      \end{singlespace}%
    \end{minipage}%
    \vspace*{2mm}%
    \hrule%
    \par%
  \endgroup%
  \vskip\notetitlebelowspace\relax% don't change this, abstract needs to \removelastskip
}
%    \end{macrocode}
% \end{macro}
%
%
% \paragraph{Title style: `small'}
%
% Implementation an alternate `small' title style.
%
% \begin{macro}{\notetitle@style@small}
%    The default title style.  Nothing mysterious, hopefully.
%    \begin{macrocode}
\newcommand{\notetitle@style@small}{%
  \begingroup\par\raggedright%
    \let\footnote\thanks%
    \vspace*{\notetitletopspace}%
    {\notetitlefont \@title}%
    \hfill\makebox{\fontsize{9pt}{10pt}\selectfont {\notetitleauthorfont \@author}%
      \hspace*{2mm}--\hspace*{2mm}{\emph{\notetitledatefont \@date}}}%
    \vspace*{1mm}\hrule\vspace*{1mm}%
    \par%
  \endgroup%
  \vskip\notetitlebelowspace\relax% don't change this, abstract needs to \removelastskip
}
%    \end{macrocode}
% \end{macro}
%
% 
% \paragraph{Title style: `article'}
%
% Implementation the `article' title style.
%
% \begin{macro}{\notetitle@style@article}
%    The title style definition.  Nothing mysterious, hopefully.
%    \begin{macrocode}
\newcommand{\notetitle@style@article}{%
  \vspace*{-3em}%
  \begingroup
    \centering
    \let\footnote\thanks%
    {\LARGE \@title \par}%
    \vskip 1.5em%
    {\large%
      \lineskip .5em%
      \begin{tabular}[t]{c}%
        \@author%
      \end{tabular}\par}%
    \vskip 1.5em%
    {\large \@date}%
    \par%
  \endgroup%
  \par%
  \vskip 2.5em\relax%
}
%    \end{macrocode}
% \end{macro}
% 
% \subsubsection{Plugging into \phfverb{\maketitle}}
%
% Actually perform the definitions to make |\maketitle| produce the
% title with the given style.  Specifically, we override
% |\@maketitle|. The latter is called internally by |\maketitle|, and
% the advantage of overriding |\@maketitle| only is that we inherit
% the mechanism provided by the style class to deal with two-column
% layouts.
%
% \begin{macro}{\phfnote@do@notetitle}
%   This macro takes care of installing the correct title into the
%   document, by overriding |\@maketitle|.
%
%   This macro is called later after processing the package options.
%   Its argument |#1| is the style name, e.g., |default|.
%
%    \begin{macrocode}
\def\phfnote@do@notetitle#1{
%    \end{macrocode}
% If we have an empty title style, then we leave default title provided by the class. 
%    \begin{macrocode}
  \if\relax\detokenize\expandafter{#1}\relax
  \else
%    \end{macrocode}
% Otherwise, we have a title style to set.  Do some checks that the given style is indeed
% defined.
%    \begin{macrocode}
    \ifcsname notetitle@style@#1\endcsname
      \def\phfnote@tmp@titsty{#1}%
    \else
      \PackageError{phfnote}{Unknown title style: '#1'.
        Using default style instead}
      \def\phfnote@tmp@titsty{default}%
    \fi
%    \end{macrocode}
% Apply new (default) definitions of |\thanks|, |\thanksmark| and |\title|.  Do this here
% only, because this can clash with more complicated versions from, e.g., \RevTeX.
%    \begin{macrocode}
    \let\title\notetitle@title
    \let\thanks\notetitle@thanks
    \let\thanksmark\notetitle@thanksmark
%    \end{macrocode}
% Now, actually overload the title style by redefining |\@maketitle|.
%    \begin{macrocode}
    \def\@maketitle{\csname notetitle@style@\phfnote@tmp@titsty\endcsname}
  \fi
}
%    \end{macrocode}
% \end{macro}
%
%
%
% \subsection{Abstract}
%
% Now we can take care of the abstract.  Unlike the title styles, the abstract has a base
% implementation.  Then, we may have attributes which change some parameters.
%
% 
% \begin{environment}{notedefaultabstract}
%   First, save the old environment |\begin{abstract}...\end{abstract}| provided by the
%   class (if any).
%    \begin{macrocode}
\let\notedefaultabstract\abstract
\let\endnotedefaultabstract\endabstract
%    \end{macrocode}
% \end{environment}
%
% \begin{macro}{\noteabstracttextfont}
% \begin{macro}{\noteabstractnamefont}
% \begin{macro}{\noteabstracttextwidth}
% \begin{macro}{\noteabstractafterspacing}
% \begin{macro}{\noteabstractbeforepacing}
%   Basic parameters of the abstract---the font for the abstract text
%   (|\noteabstracttextfont|), the font used to typeset the word ``Abstract''
%   (|\noteabstractnamefont|), and the width of the whole abstract.  Also, the spacing
%   below (|\noteabstractafterspacing|) and above (|\noteabstractbeforespacing|) the
%   abstract.
%    \begin{macrocode}
\newcommand{\noteabstracttextfont}{}
\newcommand{\noteabstractnamefont}{\bfseries\small}
\if@twocolumn
  \newcommand\noteabstracttextwidth{\hsize}
\else
  \newcommand{\noteabstracttextwidth}{0.9\hsize}
\fi
\newcommand\noteabstractafterspacing{1.5em}
\newcommand\noteabstractbeforespacing{1.5em}
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% 
% \begin{macro}{\noteabstract@nameline}
%   Create the line which contains the title of the abstract, that is, the word
%   ``Abstract.''  This can be overloaded, of course, for customization.
%    \begin{macrocode}
\def\noteabstract@nameline{
  {\parskip=0pt\relax\par\centering\noteabstractnamefont%
    \abstractname%
    \par}\vskip 1ex\relax%
}
%    \end{macrocode}
% \end{macro}
% 
% \begin{environment}{noteabstract}
%   The proper |noteabstract| environment.
%
%    \begin{macrocode}
\newenvironment{noteabstract}{%
  \removelastskip%
  \vspace{\noteabstractbeforespacing}%
  \begingroup%
    \par\noindent\centering%
    \begin{minipage}{\noteabstracttextwidth}%
      \noteabstract@nameline%
      \noteabstracttextfont%
    }%
    {%
    \end{minipage}%
    \par%
  \endgroup%
  \vspace{\noteabstractafterspacing}%
}
%    \end{macrocode}
% \end{environment}
% 
% The abstract can be customized by the attributes.  Here we define them:
%    \begin{macrocode}
\def\noteabstract@attr@wide{%
  \def\noteabstracttextwidth{\textwidth}%
}
\def\noteabstract@attr@narrow{%
  \if@twocolumn
  \else
    \def\noteabstracttextwidth{0.8\textwidth}%
  \fi
}
\def\noteabstract@attr@noname{%
  \def\noteabstract@nameline{}%\vspace*{1ex}}%
}
\def\noteabstract@attr@original{%
  \let\abstract\notedefaultabstract
  \let\endabstract\endnotedefaultabstract
}
\def\noteabstract@attr@small{%
  \g@addto@macro\noteabstracttextfont{\small}%
}
\def\noteabstract@attr@compact{%
  \renewcommand\noteabstractafterspacing{1ex}%
  \renewcommand\noteabstractbeforespacing{1ex}%
}
\def\noteabstract@attr@it{%
  \g@addto@macro\noteabstracttextfont{\itshape}%
}
%    \end{macrocode}
% 
% \begin{macro}{\phfnote@do@noteabstract}
%   This helper both defines the |abstract| environment, and also sets the abstract
%   attributes.  This macro will be called according to the package options.
%
%  |#1| = a comma-separated list of attributes.
%    \begin{macrocode}
\def\phfnote@do@noteabstract#1{
  \let\abstract\noteabstract
  \let\endabstract\endnoteabstract
  \phfnote@internal@execattribs{noteabstract@attr@}{abstract attribute}{#1}
}
%    \end{macrocode}
% \end{macro}
% 
%
%
% \subsection{Page Geometry Settings}
%
% For the page geometry settings, we just have a bunch of styles which we define as
% macros.  The macros just set up |\PassOptionsToPackage| for the |geometry| package.
% Then the correct macro will be selected according to the current |phfnote| package
% options.
%
% \begin{macro}{\phfnote@pagegeomstyle@default}
%   Default settings.  Not too wide, not too narrow.  Settings vary according to single or
%   double column setting, and according to default font point size.
%    \begin{macrocode}
\def\phfnote@pagegeomstyle@default{
  \if@twocolumn
    \PassOptionsToPackage{hmargin=1in,vmargin=0.75in,includeheadfoot}{geometry}%
  \else
    % fix the margins a bit to make text wider
    \ifcase\@ptsize% mods for 10 pt
      \PassOptionsToPackage{hmargin=1.5in,vmargin=1.25in}{geometry}%
    \or% mods for 11 pt
      \PassOptionsToPackage{hmargin=1.5in,vmargin=1.25in}{geometry}%
    \or% mods for 12 pt
      \PassOptionsToPackage{hmargin=1.25in,vmargin=1.25in}{geometry}%
    \fi%
  \fi
}
%    \end{macrocode}
% \end{macro}
% 
% \begin{macro}{\phfnote@pagegeomstyle@narrow}
%   Narrower style.  For single-column documents, this is closer to the
%   typographically-advertised-optimal of 50--80 characters per line, but it might look
%   narrow to some.
%    \begin{macrocode}
\def\phfnote@pagegeomstyle@narrow{
  \if@twocolumn
    \PassOptionsToPackage{hmargin=1.25in,vmargin=0.75in,includeheadfoot}{geometry}%
  \else
    % fix the margins a bit to make text wider
    \ifcase\@ptsize% mods for 10 pt
      \PassOptionsToPackage{hmargin=1.75in,vmargin=1.5in}{geometry}%
    \or% mods for 11 pt
      \PassOptionsToPackage{hmargin=1.75in,vmargin=1.5in}{geometry}%
    \or% mods for 12 pt
      \PassOptionsToPackage{hmargin=1.5in,vmargin=1.5in}{geometry}%
    \fi%
  \fi
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\phfnote@pagegeomstyle@wide}
%   Wide, comfortable style.  Wastes less paper.
%    \begin{macrocode}
\def\phfnote@pagegeomstyle@wide{
  \if@twocolumn
    \PassOptionsToPackage{hmargin=0.75in,vmargin=0.75in,includeheadfoot}{geometry}%
  \else
    % fix the margins a bit to make text wider
    \ifcase\@ptsize% mods for 10 pt
      \PassOptionsToPackage{hmargin=1.25in,vmargin=1.25in}{geometry}%
    \or% mods for 11 pt
      \PassOptionsToPackage{hmargin=1.25in,vmargin=1.25in}{geometry}%
    \or% mods for 12 pt
      \PassOptionsToPackage{hmargin=1in,vmargin=1.25in}{geometry}%
    \fi%
  \fi
}
%    \end{macrocode}
% \end{macro}
% 
% \begin{macro}{\phfnote@pagegeomstyle@xwide}
%   Extra wide.
%    \begin{macrocode}
\def\phfnote@pagegeomstyle@xwide{
  \if@twocolumn
    \PassOptionsToPackage{hmargin=0.5in,vmargin=0.5in,includeheadfoot}{geometry}%
  \else
    % fix the margins a bit to make text wider
    \ifcase\@ptsize% mods for 10 pt
      \PassOptionsToPackage{hmargin=1in,vmargin=1.25in}{geometry}%
    \or% mods for 11 pt
      \PassOptionsToPackage{hmargin=1in,vmargin=1.25in}{geometry}%
    \or% mods for 12 pt
      \PassOptionsToPackage{hmargin=0.75in,vmargin=1.25in}{geometry}%
    \fi%
  \fi
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\phfnote@pagegeomstyle@bigmargin}
%   Makes the margins asymmetric, so that a wide margin note can fit.  Used in this
%   package documentation, for example.
%    \begin{macrocode}
\def\phfnote@pagegeomstyle@bigmargin{%
  \if@twocolumn
    \PassOptionsToPackage{hmargin=1.5in,vmargin=0.75in,includeheadfoot}{geometry}%
  \else
    % fix the margins a bit to make text wider
    \ifcase\@ptsize% mods for 10 pt
      \PassOptionsToPackage{hmargin={2.25in,1.75in},vmargin=1.25in}{geometry}%
    \or% mods for 11 pt
      \PassOptionsToPackage{hmargin={2.25in,1.75in},vmargin=1.25in}{geometry}%
    \or% mods for 12 pt
      \PassOptionsToPackage{hmargin={2in,1.5in},vmargin=1.25in}{geometry}%
    \fi%
  \fi
}
%    \end{macrocode}
% \end{macro}
% 
% 
% \begin{macro}{\phfnote@do@pagegeomdefs}
%   Finally, provide a helper to set the page geometry.  Just call the right macro.
%    \begin{macrocode}
\newcommand{\phfnote@do@pagegeomdefs}[1]{
  \ifcsname phfnote@pagegeomstyle@#1\endcsname
    \csname phfnote@pagegeomstyle@#1\endcsname
  \else
    \PackageWarning{phfnote}{Unknown page geometry style: `#1'!}
  \fi

  \RequirePackage{geometry}%
}
%    \end{macrocode}
% \end{macro}
%
%
% \subsection{Text, Paragraph and Line Spacing}
%
% \paragraph{Text \& Line Spacing}
%
% \begin{macro}{\phfnote@do@spacing}
%   Some cosmetic definitions to adjust line spacing.  The line spacing is slightly
%   adjusted according to font size to make the document more readable.  Depending on
%   whether the |setspace| package is loaded, we use it or go low-level with a
%   redefinition of \LaTeX{}' |\baselinestretch|.  If the |captions| package is loaded,
%   the figure captions' line spacing is also adjusted.
%   
%   Also set an |\emergencystretch| so that lines get spaced out for underfull boxes,
%   rather than overflowing far into the margin.
%    \begin{macrocode}
\def\phfnote@do@spacing{
  \@ifpackageloaded{setspace}{
    \def\phfnote@dostretch##1{%
      \setstretch{##1}\phfnote@docaptionstretch{##1}}
  }{
    \def\phfnote@dostretch##1{%
      \renewcommand\baselinestretch{##1}\phfnote@docaptionstretch{##1}}
  }
  \@ifpackageloaded{caption}{
    \def\phfnote@docaptionstretch##1{\captionsetup{font={stretch=##1}}}
  }{
    \def\phfnote@docaptionstretch##1{\PackageWarning{phfnote}{Can't
        set line spacing for captions, because the package `caption'
        is not loaded.  Please load it before `phfnote', or use an
        appropriate (e.g. `rich') pkgset which loads this package
        automatically .}}
  }
  \if@twocolumn
    \phfnote@dostretch{1.0} % leave default
    \emergencystretch=3em\relax
  \else
    \ifcase\@ptsize% 10pt
      \phfnote@dostretch{1.1}
    \or% 11pt
      \phfnote@dostretch{1.0} % 1.05? better 1.0...
    \or% 12pt
      \phfnote@dostretch{1.0} % 1.03? not really noticeable...
    \fi
    \emergencystretch=6em\relax
  \fi
}
%    \end{macrocode}
% \end{macro}
% 
%
% \paragraph{Paragraph Spacing Presets}
%
% Here again, we define several possibilities for paragraph settings
% as individual macros (see \autoref{sec:paragraph-spacing-presets}).
% Depending on the package option, we execute the corresponding macro.
%
%    \begin{macrocode}
\def\phfnote@par@original{%
}
\def\phfnote@par@indent{%
  \setlength{\parindent}{1.5em}
  \setlength{\parskip}{0em} %0.3em
}
\def\phfnote@par@indentminiskip{%
  \setlength{\parindent}{1.5em}
  \setlength{\parskip}{0.3em}
}
\def\phfnote@par@skip{%
  \setlength{\parindent}{0em}
  \setlength{\parskip}{0.8em}
}
%    \end{macrocode}
% 
% \begin{macro}{\phfnote@do@par}
%   Execute the given paragraph setting.  The argument |#1| is the setting, for example,
%   |skip|.
%    \begin{macrocode}
\def\phfnote@do@par#1{%
  \ifcsname phfnote@par@#1\endcsname
    \csname phfnote@par@#1\endcsname
  \else
    \PackageWarning{phfnote}{Bad paragraph setting: #1. Leaving original}
  \fi
}
%    \end{macrocode}
% \end{macro}
% 
%
% \subsection{Customized, ``Inline,'' Table of Contents}
%
% \begin{macro}{\inlinetoc}
%   Just a customized table of contents.  Horizontal rules before and
%   after, and spacing is adjusted, and no ``Contents'' title.  Check
%   out the \hyperref[sec:toc]{top of this document}.
%    \begin{macrocode}
\newcommand{\inlinetoc}{%
  {%
    \vspace*{2mm}%
    \hrule%
    \vspace*{2mm}%
    \parskip=1pt\relax%
    \def\section*##1{}% no sectioning.
    \tableofcontents{}%
    \vspace*{4mm}%
    \hrule%
    \vspace*{6mm}%
  }%
}
%    \end{macrocode}
% 
% \end{macro}
%
%
%
% \subsection{Section Styling}
%
% Very limited support for styling section and paragraph headers
% (\autoref{sec:section-heading-styling}).  If you want anything
% serious, use |sectsty| or |titlesec| directly.
%
% \begin{macro}{\notesectionallfont}
% \begin{macro}{\notesectionallfontfamily}
%   The macro |\notesectionallfont| is invoked for every sectioning
%   command (for those which are styled, see the |section| and
%   |paragraph| attributes).
%
%   |\notesectionallfont| internally invokes
%   |\notesectionallfontfamily| to select which font family to use.
%   The family should be given as the font code, e.g.: |pbk| =
%   {\fontfamily{pbk}\selectfont Bookman}; |bch| =
%   {\fontfamily{bch}\selectfont Charter}; |ppl| =
%   {\fontfamily{ppl}\selectfont palatino}; |ptm| =
%   {\fontfamily{ptm}\selectfont Adobe Times}; |phv| =
%   {\fontfamily{phv}\selectfont Adobe Helvetica}; |pcr| =
%   {\fontfamily{pcr}\selectfont Adobe Courier}; |put| =
%   {\fontfamily{put}\selectfont Utopia}; |cmr| =
%   {\fontfamily{cmr}\selectfont Computer Modern Roman}; |cmss| =
%   {\fontfamily{cmss}\selectfont CM Sans Serif}; |cmbr| =
%   {\fontfamily{cmbr}\selectfont CM Bright}; google many more or look
%   directly into the source of corresponding \LaTeX{} packages.
%
%   You may customize these either via attributes or by redefining
%   them directly.  Beware that if you redefine |\notesectionallfont|
%   then you are responsible for honoring, or ignoring, the value of
%   |\notesectionallfontfamily|.
%    \begin{macrocode}
\newcommand{\notesectionallfont}{%
  \fontfamily{\notesectionallfontfamily}\fontseries{bx}\selectfont}
\newcommand{\notesectionallfontfamily}{ppl}
%    \end{macrocode}
% \end{macro}
% \end{macro}
% 
%
% \begin{macro}{\notesectionfont}
% \begin{macro}{\notesubsectionfont}
% \begin{macro}{\notesubsubsectionfont}
% \begin{macro}{\noteparagraphfont}
% \begin{macro}{\notesubparagraphfont}
%   These macros are called for their respective sectioning command,
%   after |\notesectionallfont| has been invoked. (Again, only for
%   those sectioning commands which are styled by us.)
%
%    \begin{macrocode}
\newcommand{\notesectionfont}{\large}
\newcommand{\notesubsectionfont}{\normalsize}
\newcommand{\notesubsubsectionfont}{\small}
\newcommand{\noteparagraphfont}{\normalsize}
\newcommand{\notesubparagraphfont}{\normalsize}
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% 
%
% \begin{macro}{\notesectionsetfonts}
% \begin{macro}{\noteparagraphsetfonts}
%   Helpers to directly set the font commands for |\section|,
%   |\subsection| and |\subsubsection| (with |\notesectionsetfonts|),
%   and for |\paragraph| and |\subparagraph| (with |\noteparagraphsetfonts|).
%    \begin{macrocode}
\newcommand{\notesectionsetfonts}[3]{%
  \renewcommand{\notesectionfont}{#1}%
  \renewcommand{\notesubsectionfont}{#2}%
  \renewcommand{\notesubsubsectionfont}{#3}%
}
\newcommand{\noteparagraphsetfonts}[2]{%
  \renewcommand{\noteparagraphfont}{#1}%
  \renewcommand{\notesubparagraphfont}{#2}%
}
%    \end{macrocode}
% \end{macro}
% \end{macro}
% 
%
% Define the attributes which the user can set.  See
% \autoref{sec:section-heading-styling}.
%
%    \begin{macrocode}
\def\phfnote@do@secfmt@section{
  \RequirePackage{sectsty}
  \sectionfont{\notesectionallfont\notesectionfont}
  \subsectionfont{\notesectionallfont\notesubsectionfont}
  \subsubsectionfont{\notesectionallfont\notesubsubsectionfont}
}
\def\phfnote@do@secfmt@paragraph{
  \RequirePackage{sectsty}
  \paragraphfont{\notesectionallfont\noteparagraphfont}
  \subparagraphfont{\notesectionallfont\notesubparagraphfont}
}
\def\phfnote@do@secfmt@compact{
  \notesectionsetfonts{\normalsize}{\small}{\small}
}
\def\phfnote@do@secfmt@larger{
  \notesectionsetfonts{\Large}{\large}{\normalsize}
}

\def\phfnote@do@secfmt@secsquares{
  \RequirePackage{amssymb}
  \let\@seccntformat\phfnote@secfmt@secsquares@seccntformat
}
\def\phfnote@secfmt@secsquares@seccntformat#1{%
  \expandafter\ifx\csname #1\endcsname\section\relax%
    \unexpanded{\makebox[0pt][r]{\raisebox{0.15ex}{{%
            \notesmaller[0.6]\ensuremath{\blacksquare}}}%
        \hspace*{1.2ex}}}%
  \fi%
  \csname the#1\endcsname\quad%
}

\def\phfnote@do@secfmt@sffamily{
  \renewcommand\notesectionallfontfamily{\sfdefault}
}
\def\phfnote@do@secfmt@itpar{
  \def\noteparagraphfont{\normalfont\normalsize\itshape}
  \def\notesubparagraphfont{\normalfont\normalsize\itshape}
}
\def\phfnote@do@secfmt@blockpar{
  \let\phfnote@old@paragraph\paragraph
  \def\paragraph##1{%
    \phfnote@old@paragraph{##1}%
    \hspace*{0pt}\par\nopagebreak% ugly hack!!
  }
}
%    \end{macrocode}
% 
%
% \begin{macro}{\phfnote@do@secfmt}
%   Actually perform the required styling, according to the package
%   options given as argument.  The argument is a comma-separated list
%   of attributes specified by the user.
%    \begin{macrocode}
\def\phfnote@do@secfmt#1{%
  \phfnote@internal@execattribs{phfnote@do@secfmt@}{section formatting preset}{#1}
}
%    \end{macrocode}
% \end{macro}
% 
%
%
% \subsection{\LaTeX{} Package Sets}
%
% Define the package sets as macros.  Depending on the user-specified
% options we load the corresponding one(s) (several may be specified).
%
% See \autoref{sec:package-sets} for a description of what these
% package sets do.
%
% \begin{macro}{\phfnote@do@pkgset@none}
% \begin{macro}{\phfnote@do@pkgset@minimal}
% \begin{macro}{\phfnote@do@pkgset@rich}
% \begin{macro}{\phfnote@do@pkgset@extended}
%   Macros which implement the package sets.  Each macro invokes |\RequirePackage|
%   for the appropriate packages.
%    \begin{macrocode}
\def\phfnote@do@pkgset@none{
}

\def\phfnote@do@pkgset@minimal{

  \RequirePackage{amsmath}
  \RequirePackage{amsfonts}
  \RequirePackage{amssymb}
  \RequirePackage{amsthm}
  
  \RequirePackage{xcolor}

}

\def\phfnote@do@pkgset@rich{

  \phfnote@do@pkgset@minimal

  \RequirePackage{setspace}
  \RequirePackage{caption}

  \RequirePackage{microtype}

  \PassOptionsToPackage{shortlabels}{enumitem}
  \RequirePackage{enumitem}

  \RequirePackage{graphicx}

  \PassOptionsToPackage{T1}{fontenc}
  \RequirePackage{fontenc}

  \PassOptionsToPackage{utf8}{inputenc}
  \RequirePackage{inputenc}
}

\def\phfnote@do@pkgset@extended{

  \phfnote@do@pkgset@rich

  \RequirePackage{float}

  \RequirePackage{verbdef}

  \RequirePackage{csquotes}

  \RequirePackage{dsfont}
  \RequirePackage{bbm}
  \RequirePackage{mathtools}

}
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
%
%
% \begin{macro}{\phfnote@do@pkgset}
%   Finally, define the helper which will load the required package sets.
%    \begin{macrocode}
\def\phfnote@do@pkgset#1{
  \phfnote@internal@execattribs{phfnote@do@pkgset@}{package set}{#1}
}
%    \end{macrocode}
% \end{macro}
% 
%
% \subsection{Hyperref Support and Hyperlinks}
%
% \begin{pkgnote}
%   The name `docnotelinkcolor' is historical and hard-coded in many
%   other files I've used, so I'm DEFINITELY NOT changing it.
% \end{pkgnote}
% 
% \begin{macro}{\phfnote@do@pdfhyperrefdefs}
% \begin{macro}{\email}
% \begin{macro}{\url}
%   Load the |hyperref| package and provide sensible defaults.
%    \begin{macrocode}
\newcommand{\phfnote@do@pdfhyperrefdefs}{%
%    \end{macrocode}
% Make sure a color-managing package is loaded, {color} or {xcolor}, and define our default color:
%    \begin{macrocode}
  \phfnote@requirecolorpackage%
  \definecolor{docnotelinkcolor}{rgb}{0,0,0.4}%
%    \end{macrocode}
% 
% Load URL package, and save a version of |\url| which is not patched
% by |hyperref|:
%    \begin{macrocode}
  \RequirePackage{url}%
  \DeclareUrlCommand\phfnote@format@url{}%
%    \end{macrocode}
% 
% Set up |hyperref| options:
%    \begin{macrocode}
  \PassOptionsToPackage{bookmarks=true,backref=false}{hyperref}%
  \RequirePackage{hyperref}%
  %
  \hypersetup{unicode=true,%
    bookmarksnumbered=false,bookmarksopen=false,bookmarksopenlevel=1,%
    breaklinks=true,pdfborder={0 0 0},colorlinks=true}%
  \hypersetup{%
    anchorcolor=docnotelinkcolor,citecolor=docnotelinkcolor,%
    filecolor=docnotelinkcolor,linkcolor=docnotelinkcolor,%
    menucolor=docnotelinkcolor,runcolor=docnotelinkcolor,%
    urlcolor=docnotelinkcolor}%
%    \end{macrocode}
% 
% Provide an |\email| command for specifying e-mails.  Note that the |\url| command is
% already provided by the packages |url| and |hyperref|.
%    \begin{macrocode}
  \let\email\phfnote@email%
%    \end{macrocode}
% 
% And finally set a nicer default |\url|/|\email| style:
%    \begin{macrocode}
  \urlstyle{notesf}%
}
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% 
% \begin{macro}{\phfnotePdfLinkColor}
%   Set links color.  Use as |\phfnotePdfLinkColor|\marg{color}.
%   Color may be any color name or specification recognized by the
%   |xcolor| package.
%
%   \begin{pkgnote}
%     The pacakge {xcolor} must be loaded for |\phfnotePdfLinkColor|
%     to work.
%   \end{pkgnote}
%
%    \begin{macrocode}
\newcommand{\phfnotePdfLinkColor}[1]{%
  \@ifpackageloaded{xcolor}{%
    \colorlet{docnotelinkcolor}{#1}%
  }{% else:
    \PackageWarning{phfnote}{\protect\phfnotePdfLinkColor may only be
      used if the package xcolor is loaded.}%
  }%
}
%    \end{macrocode}
% \end{macro}
% 
%
% 
% \begin{macro}{\phfnote@sanitize@url}
% \begin{macro}{\phfnote@format@url}
% \begin{macro}{\phfnote@email}
%   Provide base macros to be able to build up |\email| command for emails and other
%   URL-like commands which should sanitize their arguments.
%
%   Also prepare the command |\phfnote@email| which will be renamed |\email| in our
%   |hyperref| package setup (see above).
% 
%    \begin{macrocode}
\def\phfnote@sanitize@url{%
  \catcode`\$12%
  \catcode`\&12%
  \catcode`\#12%
  \catcode`\^12%
  \catcode`\_12%
  \catcode`\%12%
  % \catcode`\^^J10%  newline = space
  % \catcode`\^^M10%  newline = space
  \relax%
}%
\providecommand\phfnote@format@url{\texttt}
\def\phfnote@email{\begingroup\phfnote@sanitize@url\phfnote@impl@email@}%
\def\phfnote@impl@email@#1{\endgroup\href{mailto:#1}{\phfnote@format@url{#1}}}%
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
%
%
% 
% \begin{macro}{\phfnote@requirecolorpackage}
%   And finally define an internal utility to make sure that a color package (either
%   |color| or |xcolor|) is loaded.  If none are loaded, the |xcolor| package is loaded.
%    \begin{macrocode}
\def\phfnote@requirecolorpackage{%
  \@ifpackageloaded{color}{%
  }{%
    \@ifpackageloaded{xcolor}{%
    }{%
      \RequirePackage{xcolor}%
    }%
  }%
}
%    \end{macrocode}
% \end{macro}
% 
%
% \subsection{Cosmetic Font Definitions}
%
% \begin{macro}{\phfnote@do@fontdefs}
%   Minimalist cosmetic definition for fonts: load the |T1| font
%   encoding which is better.  Also, use Computer Modern Bright as
%   sans-serif font by default instead of Computer Modern Sans Serif.
%
%    \begin{macrocode}
\def\phfnote@do@fontdefs{
 
  \PassOptionsToPackage{T1}{fontenc}
  \RequirePackage{fontenc}

  \renewcommand\sfdefault{cmbr}
  
}
%    \end{macrocode}
% \end{macro}
% 
%
% \subsection{Bibliography Stuff}
%
%   Provide some fixes for the bibliography.
%
% \begin{macro}{\phfnote@bibstyle}
% \begin{macro}{\phfnote@bibfont}
%   Our default bibliography style is stored in |\phfnote@bibstyle|.
%   By default, it's our own hacked version of the |naturemag| style.
%   The font in which to typeset the bibliography is stored in
%   |\phfnote@bibfont|.  By default, it's a little smaller than the
%   main text.
%    \begin{macrocode}
\newcommand{\phfnote@bibstyle}{naturemagdoi}
\newcommand{\phfnote@bibfont}{\fontsize{9}{11}\selectfont}
%    \end{macrocode}
% \end{macro}
% \end{macro}
% 
%
% \begin{macro}{\phfnote@bibliography}
%   These are a tentative implementation for |\bibliography|.  The latter will be set to
%   this implementation according to the user's package options.
%    \begin{macrocode}
\let\phfnote@old@bibliography\bibliography
\let\phfnote@old@bibliographystyle\bibliographystyle
\newcommand{\phfnote@bibliography}[1]{%
  \begingroup%
    \phfnote@bibfont%
    \phfnote@old@bibliographystyle{\phfnote@bibstyle}%
%    \end{macrocode}
% 
% Our hack: make sure that the next instance of |\section*| will generate a TOC
% entry. (See |\phfnoteHackSectionStarWithTOC|.)
%    \begin{macrocode}
    \phfnoteHackSectionStarWithTOC%
%    \end{macrocode}
% 
% Some special chars may appear in output of some ill-advised bibliography
% managers. Mostly the |&| symbol, such as in |Taylor & Francis|.  We won't be needing a
% \LaTeX{} alignment operator here, so just make |&| a normal printable character
% (``other'' catcode).
%    \begin{macrocode}
    \catcode`\&=12\relax% normal char
%    \end{macrocode}
%
% Adjust the appearance of e-prints. We assume e-prints refer to the arXiv; here we
% generate a hyperlink and format them better.
%
%    \begin{macrocode}
    \providecommand\eprint[2][]{\href{http://arxiv.org/abs/##2}{arXiv:##2}}
%    \end{macrocode}
% 
% Relay the call to the ``old'' |\bibliography| command to actually implement the
% bibliography.
%    \begin{macrocode}
    \phfnote@old@bibliography{#1}%
  \endgroup%
}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\phfnote@bibliographystyle}
%   Tentative implementation of |\bibliographystyle|.  Just register the new style in an
%   internal variable, so that the style is actually loaded in |\phfnote@bibliography|.
%
%   This will be renamed to replace |\bibliographystyle| later, according to package
%   options.
%    \begin{macrocode}
\newcommand{\phfnote@bibliographystyle}[1]{%
  \renewcommand{\phfnote@bibstyle}{#1}%
}
%    \end{macrocode}
% \end{macro}
% 
%
% \begin{macro}{\phfnote@do@bibliographydefs}
%   Make our changes live.  Will be called later according to package options.
%    \begin{macrocode}
\def\phfnote@do@bibliographydefs{%
  \let\bibliographystyle\phfnote@bibliographystyle%
  \let\bibliography\phfnote@bibliography%
}
%    \end{macrocode}
% \end{macro}
% 
%
%
% \subsection{Better Footnote Style}
%
% \begin{macro}{\phfnote@do@footnotedefs}
%   Adjust the formatting of footnotes so they look better.  Again,
%   this is called later according to the package options.
%    \begin{macrocode}
\def\phfnote@do@footnotedefs{
  \let\phfnote@orig@makefnmark\@makefnmark
%%  \def\@makefnmark{\hbox{\@textsuperscript{%
%%      \normalfont\tiny\fontseries{sb}\selectfont\@thefnmark}}}
  \def\@makefnmark{\hbox{\@textsuperscript{%
        \normalfont\tiny\bfseries\@thefnmark}}}
%%  \def\@makefnmark{\hbox{\@textsuperscript{%
%%      \normalfont\scriptsize\bfseries\@thefnmark}}}% too large
}
%    \end{macrocode}
% \end{macro}
% 
% 
%
%
% \subsection{Other Stand-Alone Definitions and Helpers}
%
% \subsubsection{A \phfverb{\smaller} command}
%
%
% \begin{macro}{\notesmaller}
%   Relative font size command.  Makes the text a fraction smaller
%   than its surroundings.  The fraction is either given explicitly as
%   optional argument (1.0=same size) or is by default set by
%   |\notesmallerfrac|.
%
%   To impalement this, we exploit the fact that \LaTeX{} saves the
%   current font size in the macro |\f@size|.
%    \begin{macrocode}
\newcommand\notesmaller[1][\notesmallerfrac]{%
  \fontsize{#1\dimexpr\f@size pt\relax}{#1\dimexpr\f@baselineskip pt\relax}%
  \selectfont\ignorespaces%
}
%    \end{macrocode}
% \end{macro}
% \begin{macro}{\notesmallerfrac}
%   Default fraction by which |\notesmaller| acts.  Redefine to change defaults.
%    \begin{macrocode}
\def\notesmallerfrac{0.9}
%    \end{macrocode}
% \end{macro}
%
%
% \subsubsection{URL Styles}
%
% \begin{macro}{\url@notettstyle}
% \begin{macro}{\url@notesfstyle}
% \begin{macro}{\url@notesfssstyle}
% \begin{macro}{\url@noteitsfstyle}
% \begin{macro}{\url@notermstyle}
% \begin{macro}{\url@noteitstyle}
% \begin{macro}{\url@notesmlstyle}
%   We also provide some URL styles.  These can directly set with
%   |\urlstyle|\marg{style-name}.
%
%    \begin{macrocode}
\def\url@notettstyle{%
  \def\UrlFont{\ttfamily\notesmaller}%
  \phfnote@urlstyle@common%
}
\def\url@notesfstyle{%
  \def\UrlFont{\sffamily\notesmaller}%
  \phfnote@urlstyle@common%
}
\def\url@notesfssstyle{%
  \def\UrlFont{\fontfamily{cmss}\selectfont\notesmaller}%
  \phfnote@urlstyle@common%
}
\def\url@noteitsfstyle{%
  \def\UrlFont{\sffamily\itshape\notesmaller}%
  \phfnote@urlstyle@common%
}
\def\url@notermstyle{%
  \def\UrlFont{\rmfamily\notesmaller}%
  \phfnote@urlstyle@common%
}
\def\url@noteitstyle{%
  \def\UrlFont{\itshape\notesmaller}%
  \phfnote@urlstyle@common%
}
\def\url@notesmlstyle{%
  \def\UrlFont{\notesmaller}%
  \phfnote@urlstyle@common%
}
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
%
% \begin{macro}{\phfnote@urlstyle@common}
% The following code is common to all our styles. We do an ugly hack
% in which the tilde character (`\textasciitilde') is fixed to the
% tilde char in the Adobe Times font (|ptm| code), so that it looks
% nicer and its alignment is correct.
%    \begin{macrocode}
\def\phfnote@url@tilde{\hbox{\fontfamily{ptm}\selectfont\textasciitilde}}
%%\def\phfnote@url@tilde{\raise-0.8ex\hbox{%
%%    \kern-0.2ex\fontfamily{cmbr}\selectfont\textasciitilde}}
\def\phfnote@urlstyle@common{%
  \def\UrlTildeSpecial{\do\~{\phfnote@url@tilde}}%
  \let\Url@force@Tilde\UrlTildeSpecial%
}
%    \end{macrocode}
% \end{macro}
% 
%
% \subsubsection{Utility to Add TOC Entry For Starred Section }
%
% Here we provide an ugly hack which introduces an entry in the table
% of contents for |\section*| commands.
%
% \begin{pkgwarning}
%   This is truly a hack, don't apply it globally!  It forces
%   (locally) the |\section| command to be followed by a `|*|' !  Do this
%   within a group, just before a command which you are sure is
%   invoking |\section*| (such as |\bibliography| in the |article|
%   class).
% \end{pkgwarning}
%
% \begin{macro}{\phfnoteHackSectionStarWithTOC}
%   Locally force |\section| to be followed by |*| and introduce an
%   entry in the table of contents.
%    \begin{macrocode}
\def\phfnoteHackSectionStarWithTOC{%
    \let\phfnote@old@section\section%
    \def\section*##1{\phfnote@old@section*{##1}\addcontentsline{toc}{section}{##1}}%
}
%    \end{macrocode}
% \end{macro}
% 
% \begin{macro}{\phfnoteHackSectionStarWithTOCInCommand}
%   Patches the given command (|#1|), which is known to invoke
%   |\section*|, to locally first invoke
%   |\phfnoteHackSectionStarWithTOC| and thus generate a TOC entry.
%
%    \begin{macrocode}
\def\phfnoteHackSectionStarWithTOCInCommand#1{%
  \expandafter\let\csname phfnote@old@\string#1\endcsname#1%
  \gdef#1{%
    \begingroup%
    \phfnoteHackSectionStarWithTOC%
    \csname phfnote@old@\string#1\endcsname%
    \endgroup%
  }%
}
%    \end{macrocode}
% \end{macro}
%
%
% \subsubsection{Hack to save \& restore a set of commands}
%
%    \begin{macrocode}
\def\phfnoteSaveDefs#1#2{%
  \csgdef{phfnote@restoredefs@#1}{}%
  \def\@tmpa{#2}%
  \@for\next:=\@tmpa\do{%
    \global\csletcs{phfnote@restoredefs@#1@\next}{\next}%
    \expandafter\xappto\csname phfnote@restoredefs@#1\endcsname{%
      \noexpand\csletcs{\next}{phfnote@restoredefs@#1@\next}%
    }%
  }%
}
\def\phfnoteRestoreDefs#1{%
  \ifcsname phfnote@restoredefs@#1\endcsname%
    \csname phfnote@restoredefs@#1\endcsname%
  \else%
    \PackageError{phfnote}{\string\phfnoteRestoreDefs: no such
      definitions stored (#1)}
  \fi%
}
%    \end{macrocode}
%
% \subsubsection{A utility for verbatim stuff in arguments of other macros}
%
% FIXME: DOCUMENT ME!
%
% A utility for using verbatim stuff in arguments of other macros---exploit
% |\detokenize|
%
%    \begin{macrocode}
\def\phfverb#1{%
  \ifx\protect\relax%
    \phfverbfmt{\detokenize{#1}\unskip}%
  \else%
    \noexpand\phfverb{\unexpanded{#1}}%
  \fi%
}
\def\phfverbfmt#1{\texttt{#1}}
%    \end{macrocode}
%
% \subsection{Handle Package Options}
%
% \begin{pkgnote}
%   TODO: MOVE DOCUMENTATION IN COMMENTS FOR THE PACKAGE OPTIONS INTO
%   THE USER SECTION OF THE DOCUMENTATION ABOVE.
% \end{pkgnote}
%
% \subsubsection{Define and Parse Package Options}
%
%    \begin{macrocode}

\SetupKeyvalOptions{
  family=phfnote,
  prefix=phfnote@opt@
}

%
% e.g. [pkgset=minimal]
%
% Package set to load, for convenience.  'none', 'minimal', 'rich', or 'extended'
%
\DeclareStringOption[rich]{pkgset}


%
% e.g. [title=small]
%
% The title style to use. By default, the 'default' style.  May be 'default', 'small', or
% 'article'.  You may leave empty to avoid overriding the title style, and leaving the
% class default.
%
\DeclareStringOption[default]{title}

%
% e.g. [pagegeomdefs=false]
%
% Define the page geometry.  This tries to come up with nice margin widths
% depending on note font size (10pt,11pt,12pt) and whether it is [twocolumn] or
% not.
%
% [nopagegeomdefs] is equivalent to [pagegeomdefs=false]
%
\DeclareBoolOption[true]{pagegeomdefs}
\DeclareComplementaryOption{nopagegeomdefs}{pagegeomdefs}

%
% e.g. [pagegeom=narrow]
%
% The style of page geometry to use.  Available are 'narrow', 'default', 'wide' and
% 'xwide'
%
% This has no effect if [pagegeomdefs=false] was given.
%
\DeclareStringOption[default]{pagegeom}

%
% e.g. [spacingdefs=false]
%
% Add definitions to adjust spacing of lines and words.  Includes definitions to
% avoid overflowing words in the margin in case of long words.
%
% [nospacingdefs] is equivalent to [spacingdefs=false]
%
\DeclareBoolOption[true]{spacingdefs}
\DeclareComplementaryOption{nospacingdefs}{spacingdefs}


%
% e.g. [par=skip] or [par=indent]
%
% How to treat paragraphs.  Can be indented ('indent'), with an empty line ('skip'),
% indented with small skip ('indentminiskip') or no change from LaTeX default
% ('original').
%
\DeclareStringOption[skip]{par}


%
% e.g. [abstract={noname,narrow}]
%
% Abstract flags.  May be a comma-separated list of the following: 'wide',
% 'narrow', 'noname', 'small', 'it', 'original', 'compact'
%
\DeclareStringOption[]{abstract}

%
% e.g. [hyperrefdefs=false]
%
% Load hyperref and corresponding definitions.
%
\DeclareBoolOption[true]{hyperrefdefs}
%
% [nohyperrefdefs] is equivalent to [hyperrefdefs=false]
%
\DeclareComplementaryOption{nohyperrefdefs}{hyperrefdefs}


%
% e.g. [fontdefs=true]
%
% Do some adjustments to the fonts. In particular, use the Computer Modern Bright sans
% serif font instead of the default sans serif font, e.g. for the title.
%
\DeclareBoolOption[true]{fontdefs}
%
% [nofontdefs] is equivalent to [fontdefs=false]
%
\DeclareComplementaryOption{nofontdefs}{fontdefs}

%
% e.g. [secfmt={section,compact}]
%
% Styling of section headings.  Value is comma-separated list of actions to
% take, chosen among:
%
%  - "section"  style section/subsection/subsubsection headings
%
%  - "compact"  make section/subsection/subsubsection headings more compact. Needs to be
%    used in conjunction with 'section'
%
%  - "paragraph"  style paragraph/subparagraph headings
%
% Leave empty to keep the original styling.
%
\DeclareStringOption[section]{secfmt}

%
% e.g. [footnotedefs=false]
%
% Adjustments for footnotes. Changes the symbol appearance a little bit.
%
\DeclareBoolOption[true]{footnotedefs}
%
% [nofootnotedefs] is equivalent to [footnotedefs=false]
%
\DeclareComplementaryOption{nofootnotedefs}{footnotedefs}

%
% e.g. [bibliographydefs=false]
%
% Adjustments for bibliography, including default style
%
\DeclareBoolOption[true]{bibliographydefs}
%
% [nobibliographydefs] is equivalent to [bibliographydefs=false]
%
\DeclareComplementaryOption{nobibliographydefs}{bibliographydefs}



%    \end{macrocode}
% 
%
%
% \subsubsection{Define Global Presets}
% \label{impl:presets}
%
% See \autoref{sec:presets}.
%
%  TODO: DOCUMENT ME!
%
%    \begin{macrocode}

%
% A hook for presets to do stuff at the end of package load.
%

\def\phfnote@hook@atendload{}

%
% DEFINE PRESETS
% --------------------
%
\def\phfnote@preset@article{
  \def\phfnote@opt@title{article}
  \def\phfnote@opt@par{indent}
  \def\phfnote@opt@pagegeom{default}
}
% -------------
\newcommand\phfnote@presetcommon@xnote[1][noteitsf]{% common settings to all "{sf|sfss|utopia}note" presets
  \def\phfnote@opt@title{default}
  \def\phfnote@opt@par{skip}
  \phfnote@opt@pagegeomdefstrue
  \def\phfnote@opt@pagegeom{wide}
  \setlength{\footnotesep}{5pt}
  \g@addto@macro\phfnote@hook@atendload{
    \ifdefined\urlstyle
      \urlstyle{#1}
    \fi
  }
}
\def\phfnote@preset@sfnote{
  \phfnote@presetcommon@xnote
  \phfnote@opt@footnotedefstrue
  \phfnote@opt@fontdefstrue
  \renewcommand\familydefault{\sfdefault}
  \renewcommand{\notesectionallfontfamily}{\sfdefault}
}
\def\phfnote@preset@sfssnote{
  % as sfnote, ...
  \phfnote@preset@sfnote
  % ... but:
  \phfnote@opt@fontdefsfalse
  \PassOptionsToPackage{T1}{fontenc}
  \RequirePackage{fontenc}
  \renewcommand\sfdefault{cmss}
}
\def\phfnote@preset@utopianote{
  \phfnote@presetcommon@xnote[noteit]
  \phfnote@opt@fontdefsfalse
  \PassOptionsToPackage{T1}{fontenc}
  \RequirePackage{fontenc}
  \RequirePackage{fourier}
  \renewcommand{\notesectionallfontfamily}{put}
  \renewcommand{\notetitlefont}{\bfseries}
  \renewcommand{\sfdefault}{phv}
}
\def\phfnote@preset@mnmynote{
  \phfnote@presetcommon@xnote[noteit]
  \phfnote@opt@footnotedefsfalse
  \phfnote@opt@fontdefsfalse
  \PassOptionsToPackage{T1}{fontenc}
  \RequirePackage{fontenc}
  \renewcommand{\notesectionallfontfamily}{\sfdefault}
  % require these AFTER the default package set, because some symbols may be defined in package sets etc...
  \g@addto@macro\phfnote@hook@atendload{
    \RequirePackage{MnSymbol}
    \PassOptionsToPackage{medfamily,textosf,mathlf,minionint,footnotefigures}{MinionPro}
    \RequirePackage{MinionPro}
    \PassOptionsToPackage{medfamily}{MyriadPro}
    \RequirePackage{MyriadPro}
  }
}
\def\phfnote@preset@pkgdoc{% (preset for package documentations :-)
  \phfnote@preset@utopianote% inherits utopianote
  \def\phfnote@opt@secfmt{section,paragraph,itpar,blockpar,larger,secsquares}
  \def\phfnote@opt@pagegeom{bigmargin}
  \def\phfnote@opt@abstract{noname}
  %
  % Patch up \PrintChanges and \PrintIndex, if they are defined (for if we are using the
  % {ltxdoc} package for latex package documentation)
  %
  \ifdefined\PrintChanges
    \phfnoteHackSectionStarWithTOCInCommand\PrintChanges
  \fi
  \ifdefined\PrintIndex
    \phfnoteHackSectionStarWithTOCInCommand\PrintIndex
  \fi
  %
  % Set the index to two columns only.
  %
  \ifdefined\c@IndexColumns% for index in
    \setcounter{IndexColumns}{2}
  \fi
  \RequirePackage{enumitem}
  % 
  % To document package options.
  % 
  \newlist{pkgoptions}{description}{1}
  \setlist[pkgoptions]{font=\phfnotePkgOptionsLabelFmt,style=nextline}
  \def\phfnotePkgOptionsLabelFmt##1{\fbox{\ttfamily ##1}\vspace*{5pt}\phfnote@pkgdoc@index{##1}}
  \def\phfnote@pkgdoc@index##1{%
    \begingroup\lccode`\= = `\-%  hack around \index format for pkgdoc... \index{sortkey=display-key} or sth like that
      \def\x{\lowercase{\edef\@tmpa{##1}}\edef\@tmpb{{\@tmpa=\string\verb!*+\@tmpa+}}\expandafter\index\@tmpb}%
      \x%
    \endgroup%
  }
}
\def\phfnote@preset@reset{
  \def\phfnote@opt@pkgset{none}
  \def\phfnote@opt@title{}
  \phfnote@opt@pagegeomdefsfalse
  \phfnote@opt@spacingdefsfalse
  \def\phfnote@opt@par{original}
  \def\phfnote@opt@abstract{original}
  \phfnote@opt@hyperrefdefsfalse
  \phfnote@opt@fontdefsfalse
  \def\phfnote@opt@secfmt{}
  \phfnote@opt@bibliographydefsfalse
  \phfnote@opt@footnotedefsfalse
% ADD RESET DEF HERE for new options.
}


%
% Allow to set a preset, which may set other options, for example.
%
\define@key{phfnote}{preset}{%
  \ifcsname phfnote@preset@#1\endcsname%
    \csname phfnote@preset@#1\endcsname%
  \else%
    \PackageWarning{phfnote}{Unknown preset: `#1'!}
  \fi%
}


%
% NOW PROCESS THE OPTIONS
%

\DeclareDefaultOption{%
  % We provide the standard LaTeX error.
  \@unknownoptionerror
}

\ProcessKeyvalOptions*
%    \end{macrocode}
%
% \subsubsection{And Finally Execute the Package Options}
%
%    \begin{macrocode}
\phfnote@do@pkgset{\phfnote@opt@pkgset}

\phfnote@do@notetitle{\phfnote@opt@title}

\phfnote@do@noteabstract{\phfnote@opt@abstract}

\phfnote@do@secfmt{\phfnote@opt@secfmt}

\ifphfnote@opt@pagegeomdefs
  \phfnote@do@pagegeomdefs{\phfnote@opt@pagegeom}
\fi

\ifphfnote@opt@spacingdefs
  \phfnote@do@spacing
\fi

\phfnote@do@par{\phfnote@opt@par}

\ifphfnote@opt@hyperrefdefs
  \phfnote@do@pdfhyperrefdefs
\fi

\ifphfnote@opt@fontdefs
  \phfnote@do@fontdefs
\fi

\ifphfnote@opt@bibliographydefs
  \phfnote@do@bibliographydefs
\fi

\ifphfnote@opt@footnotedefs
  \phfnote@do@footnotedefs
\fi

\phfnote@hook@atendload
%    \end{macrocode}
%
%\Finale
\endinput
