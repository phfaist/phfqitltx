% \iffalse meta-comment
%
% Copyright (C) 2016 by Philippe Faist <philippe.faist@bluewin.ch>
% -------------------------------------------------------
% 
% This file may be distributed and/or modified under the
% conditions of the LaTeX Project Public License, either version 1.3
% of this license or (at your option) any later version.
% The latest version of this license is in:
%
%    http://www.latex-project.org/lppl.txt
%
% and version 1.3 or later is part of all distributions of LaTeX 
% version 2005/12/01 or later.
%
% \fi
%
% \iffalse
%<*driver>
\ProvidesFile{phfnote.dtx}
%</driver>
%<package>\NeedsTeXFormat{LaTeX2e}[2005/12/01]
%<package>\ProvidesPackage{phfnote}
%<*package>
    [2016/04/20 v1.0 phfnote package]
%</package>
%
%<*driver>
\documentclass{ltxdoc}
\usepackage[preset=pkgdoc]{phfnote}
\usepackage[normalem]{ulem}
\usepackage{verbdef}
\EnableCrossrefs         
\RecordChanges
\let\oldPrintChanges\PrintChanges
\def\PrintChanges{%
  \begingroup%
    \let\oldsection\section%
    \def\section*##1{\oldsection*{##1}\addcontentsline{toc}{section}{##1}}%
    \oldPrintChanges%
  \endgroup}
\begin{document}
  \DocInput{phfnote.dtx}
\end{document}
%</driver>
% \fi
%
% \CheckSum{0}
%
% \CharacterTable
%  {Upper-case    \A\B\C\D\E\F\G\H\I\J\K\L\M\N\O\P\Q\R\S\T\U\V\W\X\Y\Z
%   Lower-case    \a\b\c\d\e\f\g\h\i\j\k\l\m\n\o\p\q\r\s\t\u\v\w\x\y\z
%   Digits        \0\1\2\3\4\5\6\7\8\9
%   Exclamation   \!     Double quote  \"     Hash (number) \#
%   Dollar        \$     Percent       \%     Ampersand     \&
%   Acute accent  \'     Left paren    \(     Right paren   \)
%   Asterisk      \*     Plus          \+     Comma         \,
%   Minus         \-     Point         \.     Solidus       \/
%   Colon         \:     Semicolon     \;     Less than     \<
%   Equals        \=     Greater than  \>     Question mark \?
%   Commercial at \@     Left bracket  \[     Backslash     \\
%   Right bracket \]     Circumflex    \^     Underscore    \_
%   Grave accent  \`     Left brace    \{     Vertical bar  \|
%   Right brace   \}     Tilde         \~}
%
%
% \changes{v1.0}{2016/04/20}{Initial version}
%
% \GetFileInfo{phfnote.dtx}
%
% \DoNotIndex{\newcommand,\newenvironment}
% 
% \title{The \textsf{phfnote} package\thanks{\itshape
% This document corresponds to
% \textsf{phfnote}~\fileversion, dated \filedate. It is part of
% the Part of the
% \href{https://github.com/phfaist/phfqitltx/}{\textsf{phfqitltx}}
% package suite, see \url{https://github.com/phfaist/phfqitltx}.}}
% \author{Philippe Faist\quad\email{philippe.faist@bluewin.ch}}
%
% \maketitle
%
% \begin{abstract}
%   \textsf{phfnote}---A handy \LaTeX{} class for typesetting notes in various formats.
% \end{abstract}
%
% \inlinetoc
%
% \section{Introduction}
%
% Introduction to |phfnote|.
%
% support for:
% \begin{itemize}
% \item mostly designed for use with |article| class, but not necessary.  You mileage may vary.
% \item |twocolumn|
% \item |10pt|, |11pt|, |12pt|
% \end{itemize}
%
%
% \section{Usage}
%
% How to use |phfnote|.
%
% \section{Features}
%
% Lots of them.
%
% \subsection{Title Formatting}
%
% \subsubsection{Title notes---\texttt{\textbackslash thanks}}
%
% \label{sec:main-default-title-style}
%
% |\thanks{text}|
%
% |\thanks[N]{text}| -- |N| is a number
%
% |\thanksmark[N]| -- same.
%
% \subsection{Abstract}
%
% \subsection{Predefined Package Sets}
%
% \subsection{General Formatting and Appearance}
%
% \subsubsection{Font/Spacing Goodies}
%
% \subsubsection{Paragraph Shape}
%
% \subsubsection{Section Title Formatting}
%
% \subsection{Page Geometry}
%
% \subsection{Presets}
%
%
%
%
%
% \StopEventually{\PrintChanges}
%
% \section{Implementation}
%
% Here comes the gory code.
%
% Let's start by loading the |kvoptions| package, which we need to parse the package options.
%
%    \begin{macrocode}
\RequirePackage{kvoptions}
%    \end{macrocode}
%
% \subsection{Internal Generic Code}
%
% \begin{macro}{\phfnote@internal@execattribbs}
%   An internal general-purpose macro to execute all definitions given in list of
%   attributes.
%
%   Often, a list of attributes are given via a package option (e.g.\@ for the abstract),
%   and these attributes need to be executed, or implemented, in the order they are given.
%   This macro takes care of that.  Each possible attribute must be defined as a macro
%   with a common prefix, to which the attribute is appended.
%
%   The arguments are:
%   \begin{itemize}
%   \item |#1| = prefix to look for attributes (e.g.\@ |noteabstract@attr@|);
%   \item |#2| = a human-readable name of what |#1| represents, which is used in an error
%     message in case the required attribute is not found (e.g.\@ |{abstract attribute}|);
%   \item |#3| = the list of attributes specified by the user.
%   \end{itemize}
% 
%   For example, |\phfnote@internal@execattribs{noteabstract@attr@}|\hskip0pt\relax
%   |{abstract attribute}|\hskip0pt\relax |{noname,small}| causes the commands
%   |\noteabstract@attr@noname| and |\noteabstract@attr@small| to be invoked, in this
%   order.
%
%    \begin{macrocode}
\def\phfnote@internal@execattribs#1#2#3{%
  \@for\next:=#3\do{%
    \ifcsname #1\next\endcsname%
      \csname #1\next\endcsname%
    \else%
      \PackageWarning{phfnote}{Unknown #2: '\next'. Ignoring.}
    \fi
  }
}
%    \end{macrocode}
% \end{macro}
% 
% \subsection{Title Styling}
%
%
% \subsubsection{First, some common simple definitions for our different styles}
%
% \begin{macro}{\notetitlefont}
% \begin{macro}{\notetitleauthorfont}
% \begin{macro}{\notetitledatefont}
%   These may be redefined to adapt the font of the title, author and date.
%
%    \begin{macrocode}
\newcommand{\notetitlefont}{\sffamily\bfseries}
\newcommand{\notetitleauthorfont}{}
\newcommand{\notetitledatefont}{\footnotesize}
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% 
% \begin{macro}{\notetitlebelowspace}
% \begin{macro}{\notetitletopspace}
%   These macros may be redefined to adjust spacing above and after the title.  They are
%   macros, not lengths, so they can be adjusted dynamically on the spot.
%    \begin{macrocode}
\newcommand{\notetitlebelowspace}{4mm}
\newcommand{\notetitletopspace}{-1.2cm}
%    \end{macrocode}
% \end{macro}
% \end{macro}
%
% \begin{macro}
%   Provide a ``long'' definition for |\title|, so that the title can have several
%   paragraphs.  Our style handles this by putting the title on several lines, and it can
%   be useful depending on how you want to format the title.
%    \begin{macrocode}
\long\def\title#1{\gdef\@title{#1}}
%    \end{macrocode}
% \end{macro}
% 
% \begin{macro}{\phfnote@title@checksetspace}
%   Some of our title styles require the |setspace| package.  This utility checks that
%   this package is loaded, and generates an error otherwise.
%
%   |#1| = the current title style name; this is required only for the error message.
%    \begin{macrocode}
\def\phfnote@title@checksetspace#1{%
  \ifdefined\singlespace\else%
    \PackageError{phfnote}{Note title style `#1' requires the `setspace' package to be
      loaded!  Please load it, or use a pkgset which loads it automatically}%
  \fi%
}
%    \end{macrocode}
% \end{macro}
%
% \subsubsection{Implementation of \texttt{\textbackslash thanks}}
%
% Here we provide a few fixes for the implementation of |\thanks|, both for our main
% `default' title style as well as for other simpler styles.  Our implementation supports
% |\thanks[N]{...}| and |\thanksmark[N]| as for footnotes.
%
% \paragraph{Implementation of \texttt{\textbackslash thanks} and friends, for our main
% `default' title style}
%
% \begin{macro}{\phfnote@setupthanksmpfootnote}
%   Internal---called at the beginning of a |minipage| environment, it sets up necessary
%   stuff to support |\thanks| notes within the minipage, in a single paragraph.
%
%   Some of this code was taken or really inspired directly from |latex.ltx|.
%    \begin{macrocode}
\def\phfnote@setupthanksmpfootnote{%
%    \end{macrocode}
% 
% The |\thanks| macro is implemented as a |\footnote| in a minipage.  So we hack into the
% `mpfootnote' mechanism.
%    \begin{macrocode}
  \def\thempfootnote{\arabic{mpfootnote}}%
  \let\footnoterule\relax%
  \let\thanks\footnote%
%    \end{macrocode}
%
% All footnote material is stored in a macro |\phfnote@mpfootmaterial|, initially
% empty:\footnote{NOTE: this differs from how footnotes are usually treated (directly
% typeset into a vbox I think).  Not sure what the side-effects might be.  Because this is
% just for simple email/institute info/etc. in the title, hopefully this shouldn't have
% any serious consequences.}
%    \begin{macrocode}
  \def\phfnote@mpfootmaterial{}%
%    \end{macrocode}
% and locally define |\@mpfootnotetext| to store the footnote content into that buffer,
%    \begin{macrocode}
  \long\def\@mpfootnotetext##1{%
    \protected@edef\@currentlabel%
         {\csname p@mpfootnote\endcsname\@thefnmark}%
    \protected@edef\@tmpa{\protect\phfnote@mympfootnotemark{\@thefnmark}{##1}%
      \protect\phfnote@mpfootnoteglue}%
    \expandafter\g@addto@macro\expandafter\phfnote@mpfootmaterial%
      \expandafter{\@tmpa}%
  }%
%    \end{macrocode}
% 
% Also provide |\thanksmark|, so that we can refer to other thanks/footnote-marks.
%    \begin{macrocode}
  \def\thanksmark[##1]{\phfnote@mympfootnotemark{##1}}%
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\phfnote@finalizempfootnotes}
%   Macro to call at the end of a |minipage| environment, to ensure that all |\footnote|'s
%   (and thus |\thanks|'s) are properly formatted.
%
%   This simply takes all the tokens collected in |\phfnote@mpfootmaterial| (see just
%   above), and typesets it in the |\@mpfootins| box.  The latter is automatically typeset
%   by the minipage in |\end{minipage}|.
%  \begin{macrocode}
\def\phfnote@finalizempfootnotes{%
  \global\setbox\@mpfootins=\vbox{%
    \parskip=0pt\parindent=0pt\parshape 1 0.04\textwidth 0.96\textwidth\relax%
    \noindent\leavevmode%
    \reset@font\footnotesize%
    \phfnote@fmt@titlefootnotes%
    \phfnote@mpfootmaterial}%
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\phfnote@fmt@titlefootnotes}
% \begin{macro}{\phfnote@mympfootnotemark}
% \begin{macro}{\phfnote@mpfootnoteglue}
%   Some formatting utilities which can be overridden if you know what you're doing.
%   |\phfnote@fmt@titlefootnotes| allows you to override the font in which the
%   title-footnotes/thanks are typeset.  |\phfnote@mympfootnotemark| is responsible for
%   formatting its argument as a footnote mark, usually in superscript.
%   |\phfnote@mpfootnoteglue| is the glue which is used between two footnote texts (as
%   they are typeset in a single paragraph).
%    \begin{macrocode}
\def\phfnote@fmt@titlefootnotes{}
\def\phfnote@mympfootnotemark#1{\@textsuperscript{\normalfont#1}}
\def\phfnote@mpfootnoteglue{\hskip 1.2em plus 2em minus 0.5em\relax}
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% 
%
% \paragraph{For those not using the main `default' title style}~
%
% We use \LaTeX's own |\thanks| mechanism, however we patch on the possibility for using
% |\thanks[N]{text}| and |\thanksmark[N]| for overriding the number which is used.
%
% \begin{macro}{\thanksmark}
%   The |\thanksmark| is trivially implemented by |\footnotemark|.  Very handy indeed.
%    \begin{macrocode}
\def\thanksmark{\footnotemark}
%    \end{macrocode}
% \end{macro}
% 
% Start by saving the old |\thanks| macro, just in case.
%    \begin{macrocode}
\let\phfnote@old@thanks\thanks
%    \end{macrocode}
%
% \begin{macro}{\thanks}
%   Now, we need to extend \LaTeX's |\thanks| to allow an optional argument as for
%   footnotes.
%
%   Check whether there is an optional argument; if there is none we execute \LaTeX's
%   original thanks code (replicated here), otherwise, we specify the optional argument
%   explicitly at the relevant location in \LaTeX's implementation:
%    \begin{macrocode}
\def\thanks{\@ifnextchar[\phfnote@thanks{\phfnote@thanks[]}}%]
\long\def\phfnote@thanks[#1]#2{%
  \if\relax\detokenize{#1}\relax%
%    \end{macrocode}
% 
% The optional argument is empty---just execute \LaTeX's original |\thanks| code,
% replicated here:
%    \begin{macrocode}
    \footnotemark%
    \protected@xdef\@thanks{\@thanks\protect\footnotetext[\the\c@footnote]{#2}}%
%  \end{macrocode}
% 
% Otherwise, execute \LaTeX's original |\thanks| code, but with the optional argument
% inserted wherever needed:
%    \begin{macrocode}
  \else% argument, pass on to sub-commands:
    \footnotemark[#1]%
    \protected@xdef\@thanks{\@thanks\protect\footnotetext[#1]{#2}}%
  \fi%
}
%    \end{macrocode}
% \end{macro}
% 
%
% \subsubsection{Title Styles Definition}
%
% \paragraph{Title style: `default'}~
%
% Implementation our main `default' title style.  See \autoref{sec:main-default-title-style}.
%
% \begin{macro}{\notetitle@style@default}
%    The default title style.  Nothing mysterious, hopefully.
%    \begin{macrocode}
\newcommand{\notetitle@style@default}{%
  \begingroup\par\raggedright%
    \phfnote@setupthanksmpfootnote%
    \vspace*{\notetitletopspace}%
    \phfnote@title@checksetspace{default}%
    \begin{minipage}{\textwidth}%
      \begin{singlespace}%
        \parskip=0pt\parindent=0pt\relax%
        {\let\phfnote@old@par\par%
          \def\par{\phfnote@old@par\parskip=1.5ex\relax\parshape 1 0pt \textwidth\noindent\relax}%
          \par%
          \Large  {\notetitlefont \@title}\par}%
        \vskip 2mm\relax
        \if\relax\detokenize\expandafter{\@author}\relax\else%
          \par\parshape 1 0.04\textwidth 0.96\textwidth\relax%
          {\notetitleauthorfont \@author}%
          \vskip 2mm\relax%
        \fi
        \if\relax\detokenize\expandafter{\@date}\relax\else%
          \par\parshape 1 0.04\textwidth 0.96\textwidth\relax%
          {\notetitledatefont \@date}
          \vskip 2mm\relax%
        \fi
        \global\let\@thanks\@empty%
        \phfnote@finalizempfootnotes%
      \end{singlespace}%
    \end{minipage}%
    \vspace*{2mm}%
    \hrule%
    \par%
  \endgroup%
  \vskip\notetitlebelowspace\relax% don't change this, abstract needs to \removelastskip
}
%    \end{macrocode}
% \end{macro}
%
%
% \paragraph{Title style: `small'}~
%
% Implementation an alternate `small' title style.
%
% \begin{macro}{\notetitle@style@small}
%    The default title style.  Nothing mysterious, hopefully.
%    \begin{macrocode}
\newcommand{\notetitle@style@small}{%
  \begingroup\par\raggedright%
    \let\footnote\thanks%
    \vspace*{\notetitletopspace}%
    {\notetitlefont \@title}%
    \hfill\makebox{\fontsize{9pt}{10pt}\selectfont {\notetitleauthorfont \@author}%
      \hspace*{2mm}--\hspace*{2mm}{\emph{\notetitledatefont \@date}}}%
    \vspace*{1mm}\hrule\vspace*{1mm}%
    \par%
  \endgroup%
  \vskip\notetitlebelowspace\relax% don't change this, abstract needs to \removelastskip
}
%    \end{macrocode}
% \end{macro}
%
% 
% \paragraph{Title style: `article'}~
%
% Implementation the `article' title style.
%
% \begin{macro}{\notetitle@style@article}
%    The title style definition.  Nothing mysterious, hopefully.
%    \begin{macrocode}
\newcommand{\notetitle@style@article}{% `article' style title
  \vspace*{-3em}%
  \begingroup
    \centering
    \let\footnote\thanks%
    {\LARGE \@title \par}%
    \vskip 1.5em%
    {\large%
      \lineskip .5em%
      \begin{tabular}[t]{c}%
        \@author%
      \end{tabular}\par}%
    \vskip 1.5em%
    {\large \@date}%
    \par%
  \endgroup%
  \par%
  \vskip 2.5em\relax%
}
%    \end{macrocode}
% \end{macro}
% 
% \subsubsection{Plugging into \texttt{\textbackslash maketitle}}
%
% Actually perform the definitions to make |\maketitle| produce the title with the
% given style.
%
% \begin{macro}{\phfnote@do@notetitle}
%   This macro takes care of installing the correct title into the document, by overriding
%   |\@maketitle|.
%
%   This macro is called later after processing the package options.  Its argument |#1| is
%   the style name, e.g., |default|.
%
%    \begin{macrocode}
\def\phfnote@do@notetitle#1{
%    \end{macrocode}
% If we have an empty title style, then we leave default title provided by the class. 
%    \begin{macrocode}
  \if\relax\detokenize\expandafter{#1}\relax
  \else
%    \end{macrocode}
% Otherwise, we have a title style to set.
%    \begin{macrocode}
    \ifcsname notetitle@style@#1\endcsname
      \def\phfnote@tmp@titsty{#1}%
    \else
      \PackageError{phfnote}{Unknown title style: '#1'. Using default style instead}
      \def\phfnote@tmp@titsty{default}%
    \fi
%    \end{macrocode}
% Now, actually overload the title style by redefining |\@maketitle|.
%    \begin{macrocode}
    \def\@maketitle{\csname notetitle@style@\phfnote@tmp@titsty\endcsname}
  \fi
}
%    \end{macrocode}
% \end{macro}
%
%
%
% \subsection{Abstract}
%
% Now we can take care of the abstract.  Unlike the title styles, the abstract has a base
% implementation.  Then, we may have attributes which change some parameters.
%
% 
% \begin{environment}{notedefaultabstract}
%   First, save the old environment |\begin{abstract}...\end{abstract}| provided by the
%   class (if any).
%    \begin{macrocode}
\let\notedefaultabstract\abstract
\let\endnotedefaultabstract\endabstract
%    \end{macrocode}
% \end{environment}
%
% \begin{macro}{\noteabstracttextfont}
% \begin{macro}{\noteabstractnamefont}
% \begin{macro}{\noteabstracttextwidth}
% \begin{macro}{\noteabstractafterspacing}
% \begin{macro}{\noteabstractbeforepacing}
%   Basic parameters of the abstract---the font for the abstract text
%   (|\noteabstracttextfont|), the font used to typeset the word ``Abstract''
%   (|\noteabstractnamefont|), and the width of the whole abstract.  Also, the spacing
%   below (|\noteabstractafterspacing|) and above (|\noteabstractbeforespacing|) the
%   abstract.
%    \begin{macrocode}
\newcommand{\noteabstracttextfont}{}
\newcommand{\noteabstractnamefont}{\bfseries\small}
\if@twocolumn
  \newcommand\noteabstracttextwidth{\hsize}
\else
  \newcommand{\noteabstracttextwidth}{0.9\hsize}
\fi
\newcommand\noteabstractafterspacing{1.5em}
\newcommand\noteabstractbeforespacing{1.5em}
%    \end{macrocode}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% \end{macro}
% 
% \begin{macro}{\noteabstract@nameline}
%   Create the line which contains the title of the abstract, that is, the word
%   ``Abstract.''  This can be overloaded, of course, for customization.
%    \begin{macrocode}
\def\noteabstract@nameline{
  {\parskip=0pt\relax\par\centering\noteabstractnamefont%
    \abstractname%
    \par}\vskip 1ex\relax%
}
%    \end{macrocode}
% \end{macro}
% 
% \begin{environment}{noteabstract}
%   The proper |noteabstract| environment.
%
%    \begin{macrocode}
\newenvironment{noteabstract}{%
  \removelastskip%
  \vspace{\noteabstractbeforespacing}%
  \begingroup%
    \par\noindent\centering%
    \begin{minipage}{\noteabstracttextwidth}%
      \noteabstract@nameline%
      \noteabstracttextfont%
    }%
    {%
    \end{minipage}%
    \par%
  \endgroup%
  \vspace{\noteabstractafterspacing}%
}
%    \end{macrocode}
% \end{environment}
% 
% The abstract can be customized by the attributes.  Here we define them:
%    \begin{macrocode}
\def\noteabstract@attr@wide{%
  \def\noteabstracttextwidth{\textwidth}%
}
\def\noteabstract@attr@narrow{%
  \if@twocolumn
  \else
    \def\noteabstracttextwidth{0.8\textwidth}%
  \fi
}
\def\noteabstract@attr@noname{%
  \def\noteabstract@nameline{}%\vspace*{1ex}}%
}
\def\noteabstract@attr@original{%
  \let\abstract\notedefaultabstract
  \let\endabstract\endnotedefaultabstract
}
\def\noteabstract@attr@small{%
  \g@addto@macro\noteabstracttextfont{\small}%
}
\def\noteabstract@attr@compact{%
  \renewcommand\noteabstractafterspacing{1ex}%
  \renewcommand\noteabstractbeforespacing{1ex}%
}
\def\noteabstract@attr@it{%
  \g@addto@macro\noteabstracttextfont{\itshape}%
}
%    \end{macrocode}
% 
% \begin{macro}{\phfnote@do@noteabstract}
%   This helper both defines the |abstract| environment, and also sets the abstract
%   attributes.  This macro will be called according to the package options.
%
%  |#1| = a comma-separated list of attributes.
%    \begin{macrocode}
\def\phfnote@do@noteabstract#1{
  \let\abstract\noteabstract
  \let\endabstract\endnoteabstract
  \phfnote@internal@execattribs{noteabstract@attr@}{abstract attribute}{#1}
}
%    \end{macrocode}
% \end{macro}
% 
%
%
% \subsection{Page Geometry Settings}
%
% For the page geometry settings, we just have a bunch of styles which we define as
% macros.  The macros just set up |\PassOptionsToPackage| for the |geometry| package.
% Then the correct macro will be selected according to the current |phfnote| package
% options.
%
% \begin{macro}{\phfnote@pagegeomstyle@default}
%   Default settings.  Not too wide, not too narrow.  Settings vary according to single or
%   double column setting, and according to default font point size.
%    \begin{macrocode}
\def\phfnote@pagegeomstyle@default{
  \if@twocolumn
    \PassOptionsToPackage{hmargin=1in,vmargin=0.75in,includeheadfoot}{geometry}%
  \else
    % fix the margins a bit to make text wider
    \ifcase\@ptsize% mods for 10 pt
      \PassOptionsToPackage{hmargin=1.5in,vmargin=1.25in}{geometry}%
    \or% mods for 11 pt
      \PassOptionsToPackage{hmargin=1.5in,vmargin=1.25in}{geometry}%
    \or% mods for 12 pt
      \PassOptionsToPackage{hmargin=1.25in,vmargin=1.25in}{geometry}%
    \fi%
  \fi
}
%    \end{macrocode}
% \end{macro}
% 
% \begin{macro}{\phfnote@pagegeomstyle@narrow}
%   Narrower style.  For single-column documents, this is closer to the
%   typographically-advertised-optimal of 50--80 characters per line, but it might look
%   narrow to some.
%    \begin{macrocode}
\def\phfnote@pagegeomstyle@narrow{
  \if@twocolumn
    \PassOptionsToPackage{hmargin=1.25in,vmargin=0.75in,includeheadfoot}{geometry}%
  \else
    % fix the margins a bit to make text wider
    \ifcase\@ptsize% mods for 10 pt
      \PassOptionsToPackage{hmargin=1.75in,vmargin=1.5in}{geometry}%
    \or% mods for 11 pt
      \PassOptionsToPackage{hmargin=1.75in,vmargin=1.5in}{geometry}%
    \or% mods for 12 pt
      \PassOptionsToPackage{hmargin=1.5in,vmargin=1.5in}{geometry}%
    \fi%
  \fi
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\phfnote@pagegeomstyle@wide}
%   Wide, comfortable style.  Wastes less paper.
%    \begin{macrocode}
\def\phfnote@pagegeomstyle@wide{
  \if@twocolumn
    \PassOptionsToPackage{hmargin=0.75in,vmargin=0.75in,includeheadfoot}{geometry}%
  \else
    % fix the margins a bit to make text wider
    \ifcase\@ptsize% mods for 10 pt
      \PassOptionsToPackage{hmargin=1.25in,vmargin=1.25in}{geometry}%
    \or% mods for 11 pt
      \PassOptionsToPackage{hmargin=1.25in,vmargin=1.25in}{geometry}%
    \or% mods for 12 pt
      \PassOptionsToPackage{hmargin=1in,vmargin=1.25in}{geometry}%
    \fi%
  \fi
}
%    \end{macrocode}
% \end{macro}
% 
% \begin{macro}{\phfnote@pagegeomstyle@xwide}
%   Extra wide.
%    \begin{macrocode}
\def\phfnote@pagegeomstyle@xwide{
  \if@twocolumn
    \PassOptionsToPackage{hmargin=0.5in,vmargin=0.5in,includeheadfoot}{geometry}%
  \else
    % fix the margins a bit to make text wider
    \ifcase\@ptsize% mods for 10 pt
      \PassOptionsToPackage{hmargin=1in,vmargin=1.25in}{geometry}%
    \or% mods for 11 pt
      \PassOptionsToPackage{hmargin=1in,vmargin=1.25in}{geometry}%
    \or% mods for 12 pt
      \PassOptionsToPackage{hmargin=0.75in,vmargin=1.25in}{geometry}%
    \fi%
  \fi
}
%    \end{macrocode}
% \end{macro}
%
% \begin{macro}{\phfnote@pagegeomstyle@bigmargin}
%   Makes the margins asymmetric, so that a wide margin note can fit.
%    \begin{macrocode}
\def\phfnote@pagegeomstyle@bigmargin{% ( for big margins, e.g. for package documentation :)
  \if@twocolumn
    \PassOptionsToPackage{hmargin=1.5in,vmargin=0.75in,includeheadfoot}{geometry}%
  \else
    % fix the margins a bit to make text wider
    \ifcase\@ptsize% mods for 10 pt
      \PassOptionsToPackage{hmargin={2.25in,1.75in},vmargin=1.25in}{geometry}%
    \or% mods for 11 pt
      \PassOptionsToPackage{hmargin={2.25in,1.75in},vmargin=1.25in}{geometry}%
    \or% mods for 12 pt
      \PassOptionsToPackage{hmargin={2in,1.5in},vmargin=1.25in}{geometry}%
    \fi%
  \fi
}
%    \end{macrocode}
% \end{macro}
% 
% 
% \begin{macro}{\phfnote@do@pagegeomdefs}
%   Finally, provide a helper to set the page geometry.  Just call the right macro.
%    \begin{macrocode}
\newcommand{\phfnote@do@pagegeomdefs}[1]{
  \ifcsname phfnote@pagegeomstyle@#1\endcsname
    \csname phfnote@pagegeomstyle@#1\endcsname
  \else
    \PackageWarning{phfnote}{Unknown page geometry style: `#1'!}
  \fi

  \RequirePackage{geometry}%
}
%    \end{macrocode}
% \end{macro}
%
%
% \subsection{Text, Paragraph and Line Spacing}
%
% \paragraph{Text \& Line Spacing}~
%
% \begin{macro}
%   Some cosmetic definitions to adjust line spacing.  The line spacing is slightly
%   adjusted according to font size to make the document more readable.  Depending on
%   whether the |setspace| package is loaded, we use it or go low-level with a
%   redefinition of \LaTeX{}' |\baselinestretch|.  If the |captions| package is loaded,
%   the figure captions' line spacing is also adjusted.
%   
%   Also set an |\emergencystretch| so that lines get spaced out for underfull boxes,
%   rather than overflowing far into the margin.
%    \begin{macrocode}
\def\phfnote@do@spacing{
  \@ifpackageloaded{setspace}{
    \def\phfnote@dostretch##1{\setstretch{##1}\phfnote@docaptionstretch{##1}}
  }{
    \def\phfnote@dostretch##1{\renewcommand\baselinestretch{##1}\phfnote@docaptionstretch{##1}}
  }
  \@ifpackageloaded{caption}{
    \def\phfnote@docaptionstretch##1{\captionsetup{font={stretch=##1}}}
  }{
    \def\phfnote@docaptionstretch##1{\PackageWarning{phfnote}{Can't set line spacing for
        captions, because the package `caption' is not loaded.  Please load it before
        `phfnote', or use an appropriate (e.g. `rich') pkgset which loads this package
        automatically .}}
  }
  \if@twocolumn
    \phfnote@dostretch{1.0} % leave default
    \emergencystretch=3em\relax
  \else
    \ifcase\@ptsize% 10pt
      \phfnote@dostretch{1.1}
    \or% 11pt
      \phfnote@dostretch{1.0} % 1.05? better 1.0...
    \or% 12pt
      \phfnote@dostretch{1.0} % 1.03? not really noticeable...
    \fi
    \emergencystretch=6em\relax
  \fi
}
%    \end{macrocode}
% \end{macro}
% 
%
% \paragraph{Paragraph Presets}~
%
% Here again, we define several possibilities for paragraph settings as individual macros.
% Depending on the package option, we execute the corresponding macro.
%
%    \begin{macrocode}
\def\phfnote@par@original{%
}
\def\phfnote@par@indent{%
  \setlength{\parindent}{1.5em}
  \setlength{\parskip}{0em} %0.3em
}
\def\phfnote@par@indentminiskip{%
  \setlength{\parindent}{1.5em}
  \setlength{\parskip}{0.3em}
}
\def\phfnote@par@skip{%
  \setlength{\parindent}{0em}
  \setlength{\parskip}{0.8em}
}
%    \end{macrocode}
% 
% \begin{macro}{\phfnote@do@par}
%   Execute the given paragraph setting.  The argument |#1| is the setting, for example,
%   |skip|.
%    \begin{macrocode}
\def\phfnote@do@par#1{%
  \ifcsname phfnote@par@#1\endcsname
    \csname phfnote@par@#1\endcsname
  \else
    \PackageWarning{phfnote}{Bad paragraph setting: #1. Leaving original}
  \fi
}
%    \end{macrocode}
% 
%
% \subsection{Customized, ``Inline,'' Table of Contents}
%
% \begin{macro}
%   Just a customized table of contents.  Horizontal rules before and after, and spacing is adjusted.
%    \begin{macrocode}
\newcommand{\inlinetoc}{%
  {%
    \vspace*{2mm}%
    \hrule%
    \vspace*{-2mm}%
    \parskip=2pt\relax%
    \tableofcontents{}%
    \vspace*{4mm}%
    \hrule%
    \vspace*{6mm}%
  }%
}
%    \end{macrocode}
% 
% \end{macro}
%
%
%
% \subsection{Section Styling}
%
%  TODO: DOCUMENT ME!
%
%    \begin{macrocode}

%
% Section fonts are customized using the {sectsty} package.  If this conflicts
% in your document, use the [nosectionfonts] package option, then sectsty won't
% be loaded.
%


% Font Settings
%
% 	pbk = bookman ; bch = charter ; ppl = palatino ; ptm = Adobe Times ;
% 	phv = Adobe Helvetica ; pcr = Adobe Courier ; put = Utopia ;
% 	cmr = Comupter Modern Roman ; cmss = CM Sans Serif
%

%
\newcommand{\notesectionfontsize}{\large}
\newcommand{\notesubsectionfontsize}{\normalsize}
\newcommand{\notesubsubsectionfontsize}{\small}
\newcommand{\noteparagraphfontsize}{\normalsize}
\newcommand{\notesubparagraphfontsize}{\normalsize}
%
\newcommand{\notesectionfont}{\fontfamily{\notesectionfontfamily}\fontseries{bx}\selectfont}
\newcommand{\notesectionfontfamily}{ppl}
% 
\newcommand{\notesectionfontsetsizes}[3]{%
  \renewcommand{\notesectionfontsize}{#1}%
  \renewcommand{\notesubsectionfontsize}{#2}%
  \renewcommand{\notesubsubsectionfontsize}{#3}%
}
% 
\newcommand{\noteparagraphfontsetsizes}[2]{%
  \renewcommand{\noteparagraphfontsize}{#1}%
  \renewcommand{\notesubparagraphfontsize}{#2}%
}


\def\phfnote@do@secfmt@section{
  \sectionfont{\notesectionfont\notesectionfontsize}
  \subsectionfont{\notesectionfont\notesubsectionfontsize}
  \subsubsectionfont{\notesectionfont\notesubsubsectionfontsize}
}
\def\phfnote@do@secfmt@paragraph{
  \paragraphfont{\notesectionfont\noteparagraphfontsize}
  \subparagraphfont{\notesectionfont\notesubparagraphfontsize}
}
\def\phfnote@do@secfmt@compact{
  \notesectionfontsetsizes{\normalsize}{\small}{\small}
}
\def\phfnote@do@secfmt@sffamily{
  \renewcommand\notesectionfontfamily{\sfdefault}
}
\def\phfnote@do@secfmt#1{%
  \RequirePackage{sectsty}
  \phfnote@internal@execattribs{phfnote@do@secfmt@}{section formatting preset}{#1}
}

%    \end{macrocode}
% 
%
%
% \subsection{\LaTeX{} Package Sets}
%
%  TODO: DOCUMENT ME!
%
%    \begin{macrocode}



% ------------------------------------------------------------------------------
%     INCLUDE DEFAULT SET OF USEFUL PACKAGES
% ------------------------------------------------------------------------------

\def\phfnote@do@pkgset@none{
}

\def\phfnote@do@pkgset@minimal{

  \RequirePackage{amsmath}
  \RequirePackage{amsfonts}
  \RequirePackage{amssymb}
  \RequirePackage{amsthm}
  
  \RequirePackage{xcolor}

}

\def\phfnote@do@pkgset@rich{

  \phfnote@do@pkgset@minimal

  \RequirePackage{setspace}
  \RequirePackage{caption}

  \RequirePackage{microtype}

  \PassOptionsToPackage{shortlabels}{enumitem}
  \RequirePackage{enumitem}

  \RequirePackage{graphicx}

  \PassOptionsToPackage{T1}{fontenc}
  \RequirePackage{fontenc}

  \PassOptionsToPackage{utf8}{inputenc}
  \RequirePackage{inputenc}
}

\def\phfnote@do@pkgset@extended{

  \phfnote@do@pkgset@rich

  \RequirePackage{float}

  \RequirePackage{verbdef}

  \RequirePackage{csquotes}

  \RequirePackage{dsfont}
  \RequirePackage{bbm}
  \RequirePackage{mathtools}

}

\def\phfnote@do@pkgset#1{

  \phfnote@internal@execattribs{phfnote@do@pkgset@}{package set}{#1}
%  \ifcsname phfnote@do@pkgset@#1\endcsname
%    \csname phfnote@do@pkgset@#1\endcsname
%  \else
%    \PackageWarning{phfnote}{Unknown package set to load: #1. Loading minimal set}
%    \phfnote@do@pkgset@minimal
%  \fi

}


%    \end{macrocode}
% 
%
%
% \subsection{Hyperref Support and Hyperlinks}
%
%  TODO: DOCUMENT ME!
%
%    \begin{macrocode}


%
% NOTE: the name `docnotelinkcolor' is hard-coded in many other files I've used,
% so I'm NOT changing it.
%


%
% Set links color.  Use as \phfnotePdfLinkColor{<color specification or name>}.
%
% The pacakge {xcolor} must be loaded.
%
\newcommand{\phfnotePdfLinkColor}[1]{%
  \@ifpackageloaded{xcolor}{%
    \colorlet{docnotelinkcolor}{#1}%
  }{% else:
    \PackageWarning{phfnote}{\protect\phfnotePdfLinkColor may only be used if the package
      xcolor is loaded.}%
  }%
}

\newcommand{\phfnote@do@pdfhyperrefdefs}{%
  %
  % Make sure a color-managing package is loaded, {color} or {xcolor}
  %
  \phfnote@requirecolorpackage%
  % 
  % Define our default color
  % 
  \definecolor{docnotelinkcolor}{rgb}{0,0,0.4}% actually define our PDF hyperref link color
  % 
  %
  % Load URL package.
  %
  \RequirePackage{url}%
  %
  \DeclareUrlCommand\phfnote@format@url{}% a version of \url which is not patched by hyperref
  % 
  %
  % Set up hyperref
  %
  \PassOptionsToPackage{bookmarks=true,backref=false}{hyperref}%
  \RequirePackage{hyperref}%
  %
  \hypersetup{unicode=true,%
    bookmarksnumbered=false,bookmarksopen=false,bookmarksopenlevel=1,%
    breaklinks=true,pdfborder={0 0 0},colorlinks=true}%
  \hypersetup{%
    anchorcolor=docnotelinkcolor,citecolor=docnotelinkcolor,%
    filecolor=docnotelinkcolor,linkcolor=docnotelinkcolor,%
    menucolor=docnotelinkcolor,runcolor=docnotelinkcolor,%
    urlcolor=docnotelinkcolor}%
  %
  %
  % Provide an \email command.
  %
  \let\email\phfnote@email%
  %
  %
  % And set the default \url/\email style
  %
  \urlstyle{notesf}%
  %
}


% 
% and also provide an \email{} command for emails.
% 
\def\phfnote@sanitize@url{%
  \catcode`\$12%
  \catcode`\&12%
  \catcode`\#12%
  \catcode`\^12%
  \catcode`\_12%
  \catcode`\%12%
  % \catcode`\^^J10%  newline = space
  % \catcode`\^^M10%  newline = space
  \relax%
}%
\providecommand\phfnote@format@url{\texttt}
\def\phfnote@email{\begingroup\phfnote@sanitize@url\phfnote@impl@email@}%
\def\phfnote@impl@email@#1{\endgroup\href{mailto:#1}{\phfnote@format@url{#1}}}%
% 







\def\phfnote@requirecolorpackage{%
  % require the 'color' or 'xcolor' package
  \@ifpackageloaded{color}{%
    % all fine
  }{% else
    \@ifpackageloaded{xcolor}{%
      % all fine again
    }{% else - no color package loaded
      \RequirePackage{xcolor}%
    }%
  }%
}



%    \end{macrocode}
% 
%
%
% \subsection{Cosmetic Font Definitions}
%
%  TODO: DOCUMENT ME!
%
%    \begin{macrocode}
\def\phfnote@do@fontdefs{
 
  \PassOptionsToPackage{T1}{fontenc}
  \RequirePackage{fontenc}

  \renewcommand\sfdefault{cmbr}
  
}

%    \end{macrocode}
% 
%
%
% \subsection{Bibliography Stuff}
%
%  TODO: DOCUMENT ME!
%
%    \begin{macrocode}

%
% our default bibliography style -- hacked version of naturemag
%
\newcommand{\phfnote@bibstyle}{naturemagdoi}

%
%
%
\newcommand{\phfnote@bibliographystyle}[1]{\renewcommand{\phfnote@bibstyle}{#1}}
\newcommand{\phfnotebibfont}{\fontsize{9}{11}\selectfont}

\let\phfnote@old@bibliography\bibliography
\let\phfnote@old@bibliographystyle\bibliographystyle

\newcommand{\phfnote@bibliography}[1]{%
  \begingroup%
    \phfnotebibfont%
    % \bibliographystyle{unsrturl}
    \phfnote@old@bibliographystyle{\phfnote@bibstyle}%
    %
    % \clearpage%
    \addcontentsline{toc}{section}{\refname}
    % 
    % Some fixes for some special chars which may appear in ill-advised
    % bibliography managers -- such as the '&' symbol
    % 
    \catcode`\&=12\relax% normal char
    %
    % Defs for appearance
    %
    \providecommand\eprint[2][]{\href{http://arxiv.org/abs/##2}{arXiv:##2}}
    %
    \phfnote@old@bibliography{#1}%
    %
  \endgroup%
}

\def\phfnote@do@bibliographydefs{%
  \let\bibliographystyle\phfnote@bibliographystyle%
  \let\bibliography\phfnote@bibliography%
}

%    \end{macrocode}
% 
%
%
% \subsection{Better Footnote Style}
%
%  TODO: DOCUMENT ME!
%
%    \begin{macrocode}

\def\phfnote@do@footnotedefs{
  \let\phfnote@orig@makefnmark\@makefnmark
%  \def\@makefnmark{\hbox{\@textsuperscript{\normalfont\tiny\fontseries{sb}\selectfont\@thefnmark}}}
  \def\@makefnmark{\hbox{\@textsuperscript{\normalfont\tiny\bfseries\@thefnmark}}}
%  \def\@makefnmark{\hbox{\@textsuperscript{\normalfont\scriptsize\bfseries\@thefnmark}}} % too large
}


%    \end{macrocode}
% 
%
%
% \subsection{Other Stand-Alone Definitions and Helpers}
%
%  TODO: DOCUMENT ME!
%
%    \begin{macrocode}

\def\notesmallerfrac{0.9}
\newcommand\notesmaller[1][\notesmallerfrac]{%
  \fontsize{#1\dimexpr\f@size pt\relax}{#1\dimexpr\f@baselineskip pt\relax}%
  \selectfont\ignorespaces%
}

%
% URL styles: 'notett', 'notesf', 'noteitsf', 'noterm', 'noteit' and 'notesml'
%
\def\url@notettstyle{%
  \def\UrlFont{\ttfamily\notesmaller}%
  \phfnote@urlstyle@common%
}
\def\url@notesfstyle{%
  \def\UrlFont{\sffamily\notesmaller}%
  \phfnote@urlstyle@common%
}
\def\url@notesfssstyle{%
  \def\UrlFont{\fontfamily{cmss}\selectfont\notesmaller}%
  \phfnote@urlstyle@common%
}
\def\url@noteitsfstyle{%
  \def\UrlFont{\sffamily\itshape\notesmaller}%
  \phfnote@urlstyle@common%
}
\def\url@notermstyle{%
  \def\UrlFont{\rmfamily\notesmaller}%
  \phfnote@urlstyle@common%
}
\def\url@noteitstyle{%
  \def\UrlFont{\itshape\notesmaller}%
  \phfnote@urlstyle@common%
}
\def\url@notesmlstyle{%
  \def\UrlFont{\notesmaller}%
  \phfnote@urlstyle@common%
}

\def\phfnote@url@tilde{\hbox{\fontfamily{ptm}\selectfont\textasciitilde}}
\def\phfnote@urlstyle@common{%
%  \def\UrlTildeSpecial{\do\~{\raise-0.8ex\hbox{\kern-0.2ex\fontfamily{cmbr}\selectfont\textasciitilde}}}
  % \raise-0.8ex\hbox{\kern-0.2ex\textasciitilde}}}%
  \def\UrlTildeSpecial{\do\~{\phfnote@url@tilde}}%
  \let\Url@force@Tilde\UrlTildeSpecial%
}

%
% Fix \path and \email commands to follow \urlstyle
%
\def\noteUrlFixCommands{%
%  \DeclareUrlCommand\path{}
%  \DeclareUrlCommand\email{}
}


%    \end{macrocode}
% 
%
%
% \subsection{Parse and Handle Package Options}
%
%  TODO: DOCUMENT ME!
%
%    \begin{macrocode}

\SetupKeyvalOptions{
  family=phfnote,
  prefix=phfnote@opt@
}

%
% e.g. [pkgset=minimal]
%
% Package set to load, for convenience.  'none', 'minimal', 'rich', or 'extended'
%
\DeclareStringOption[rich]{pkgset}


%
% e.g. [title=small]
%
% The title style to use. By default, the 'default' style.  May be 'default', 'small', or
% 'article'.  You may leave empty to avoid overriding the title style, and leaving the
% class default.
%
\DeclareStringOption[default]{title}

%
% e.g. [pagegeomdefs=false]
%
% Define the page geometry.  This tries to come up with nice margin widths
% depending on note font size (10pt,11pt,12pt) and whether it is [twocolumn] or
% not.
%
% [nopagegeomdefs] is equivalent to [pagegeomdefs=false]
%
\DeclareBoolOption[true]{pagegeomdefs}
\DeclareComplementaryOption{nopagegeomdefs}{pagegeomdefs}

%
% e.g. [pagegeom=narrow]
%
% The style of page geometry to use.  Available are 'narrow', 'default', 'wide' and
% 'xwide'
%
% This has no effect if [pagegeomdefs=false] was given.
%
\DeclareStringOption[default]{pagegeom}

%
% e.g. [spacingdefs=false]
%
% Add definitions to adjust spacing of lines and words.  Includes definitions to
% avoid overflowing words in the margin in case of long words.
%
% [nospacingdefs] is equivalent to [spacingdefs=false]
%
\DeclareBoolOption[true]{spacingdefs}
\DeclareComplementaryOption{nospacingdefs}{spacingdefs}


%
% e.g. [par=skip] or [par=indent]
%
% How to treat paragraphs.  Can be indented ('indent'), with an empty line ('skip'),
% indented with small skip ('indentminiskip') or no change from LaTeX default
% ('original').
%
\DeclareStringOption[skip]{par}


%
% e.g. [abstract={noname,narrow}]
%
% Abstract flags.  May be a comma-separated list of the following: 'wide',
% 'narrow', 'noname', 'small', 'it', 'original', 'compact'
%
\DeclareStringOption[]{abstract}

%
% e.g. [hyperrefdefs=false]
%
% Load hyperref and corresponding definitions.
%
\DeclareBoolOption[true]{hyperrefdefs}
%
% [nohyperrefdefs] is equivalent to [hyperrefdefs=false]
%
\DeclareComplementaryOption{nohyperrefdefs}{hyperrefdefs}


%
% e.g. [fontdefs=true]
%
% Do some adjustments to the fonts. In particular, use the Computer Modern Bright sans
% serif font instead of the default sans serif font, e.g. for the title.
%
\DeclareBoolOption[true]{fontdefs}
%
% [nofontdefs] is equivalent to [fontdefs=false]
%
\DeclareComplementaryOption{nofontdefs}{fontdefs}

%
% e.g. [secfmt={section,compact}]
%
% Styling of section headings.  Value is comma-separated list of actions to
% take, chosen among:
%
%  - "section"  style section/subsection/subsubsection headings
%
%  - "compact"  make section/subsection/subsubsection headings more compact. Needs to be
%    used in conjunction with 'section'
%
%  - "paragraph"  style paragraph/subparagraph headings
%
% Leave empty to keep the original styling.
%
\DeclareStringOption[section]{secfmt}

%
% e.g. [footnotedefs=false]
%
% Adjustments for footnotes. Changes the symbol appearance a little bit.
%
\DeclareBoolOption[true]{footnotedefs}
%
% [nofootnotedefs] is equivalent to [footnotedefs=false]
%
\DeclareComplementaryOption{nofootnotedefs}{footnotedefs}

%
% e.g. [bibliographydefs=false]
%
% Adjustments for bibliography, including default style
%
\DeclareBoolOption[true]{bibliographydefs}
%
% [nobibliographydefs] is equivalent to [bibliographydefs=false]
%
\DeclareComplementaryOption{nobibliographydefs}{bibliographydefs}



%    \end{macrocode}
% 
%
%
% \subsection{Define Global Presets}
%
%  TODO: DOCUMENT ME!
%
%    \begin{macrocode}

%
% A hook for presets to do stuff at the end of package load.
%

\def\phfnote@hook@atendload{}

%
% DEFINE PRESETS
% --------------------
%
\def\phfnote@preset@article{
  \def\phfnote@opt@title{article}
  \def\phfnote@opt@par{indent}
  \def\phfnote@opt@pagegeom{default}
}
% -------------
\newcommand\phfnote@presetcommon@xnote[1][noteitsf]{% common settings to all "{sf|sfss|utopia}note" presets
  \def\phfnote@opt@title{default}
  \def\phfnote@opt@par{skip}
  \phfnote@opt@pagegeomdefstrue
  \def\phfnote@opt@pagegeom{wide}
  \g@addto@macro\phfnote@hook@atendload{
    \ifdefined\urlstyle
      \urlstyle{#1}
    \fi
  }
}
\def\phfnote@preset@sfnote{
  \phfnote@presetcommon@xnote
  \phfnote@opt@footnotedefstrue
  \phfnote@opt@fontdefstrue
  \renewcommand\familydefault{\sfdefault}
  \renewcommand{\notesectionfontfamily}{\sfdefault}
}
\def\phfnote@preset@sfssnote{
  % as sfnote, ...
  \phfnote@preset@sfnote
  % ... but:
  \phfnote@opt@fontdefsfalse
  \PassOptionsToPackage{T1}{fontenc}
  \RequirePackage{fontenc}
  \renewcommand\sfdefault{cmss}
}
\def\phfnote@preset@utopianote{
  \phfnote@presetcommon@xnote[noteit]
  \phfnote@opt@fontdefsfalse
  \PassOptionsToPackage{T1}{fontenc}
  \RequirePackage{fontenc}
  \RequirePackage{fourier}
  \renewcommand{\notesectionfontfamily}{put}
  \renewcommand{\notetitlefont}{\bfseries}
  \renewcommand{\sfdefault}{phv}
}
\def\phfnote@preset@mnmynote{
  \phfnote@presetcommon@xnote[noteit]
  \phfnote@opt@footnotedefsfalse
  \phfnote@opt@fontdefsfalse
  \PassOptionsToPackage{T1}{fontenc}
  \RequirePackage{fontenc}
  \renewcommand{\notesectionfontfamily}{\sfdefault}
  % require these AFTER the default package set, because some symbols may be defined in package sets etc...
  \g@addto@macro\phfnote@hook@atendload{
    \RequirePackage{MnSymbol}
    \PassOptionsToPackage{medfamily,textosf,mathlf,minionint,footnotefigures}{MinionPro}
    \RequirePackage{MinionPro}
    \PassOptionsToPackage{medfamily}{MyriadPro}
    \RequirePackage{MyriadPro}
  }
}
\def\phfnote@preset@pkgdoc{% (preset for package documentations :-)
  \phfnote@preset@utopianote% inherits utopianote
  \def\phfnote@opt@pagegeom{bigmargin}
  \def\phfnote@opt@abstract{noname,compact}
}
\def\phfnote@preset@reset{
  \def\phfnote@opt@pkgset{none}
  \def\phfnote@opt@title{}
  \phfnote@opt@pagegeomdefsfalse
  \phfnote@opt@spacingdefsfalse
  \def\phfnote@opt@par{original}
  \def\phfnote@opt@abstract{original}
  \phfnote@opt@hyperrefdefsfalse
  \phfnote@opt@fontdefsfalse
  \def\phfnote@opt@secfmt{}
  \phfnote@opt@bibliographydefsfalse
  \phfnote@opt@footnotedefsfalse
% ADD RESET DEF HERE for new options.
}


%
% Allow to set a preset, which may set other options, for example.
%
\define@key{phfnote}{preset}{%
  \ifcsname phfnote@preset@#1\endcsname%
    \csname phfnote@preset@#1\endcsname%
  \else%
    \PackageWarning{phfnote}{Unknown preset: `#1'!}
  \fi%
}



%
% NOW PROCESS THE OPTIONS
%

\DeclareDefaultOption{%
  % We provide the standard LaTeX error.
  \@unknownoptionerror
}

\ProcessKeyvalOptions*


% ==============================================================================
% EXECUTE PACKAGE OPTIONS
% ==============================================================================



%
% execute definitions controlled by options
%


\phfnote@do@pkgset{\phfnote@opt@pkgset}

\phfnote@do@notetitle{\phfnote@opt@title}

\phfnote@do@noteabstract{\phfnote@opt@abstract}

\phfnote@do@secfmt{\phfnote@opt@secfmt}

\ifphfnote@opt@pagegeomdefs
  \phfnote@do@pagegeomdefs{\phfnote@opt@pagegeom}
\fi

\ifphfnote@opt@spacingdefs
  \phfnote@do@spacing
\fi

\phfnote@do@par{\phfnote@opt@par}

\ifphfnote@opt@hyperrefdefs
  \phfnote@do@pdfhyperrefdefs
\fi

\ifphfnote@opt@fontdefs
  \phfnote@do@fontdefs
\fi

\ifphfnote@opt@bibliographydefs
  \phfnote@do@bibliographydefs
\fi

\ifphfnote@opt@footnotedefs
  \phfnote@do@footnotedefs
\fi



\phfnote@hook@atendload


%    \end{macrocode}
%
%\Finale
\endinput
