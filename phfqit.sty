
\NeedsTeXFormat{LaTeX2e}
\ProvidesPackage{phfqit}[2016/01/28 phfqit package]

\RequirePackage{etoolbox}

\RequirePackage{amsmath}
\RequirePackage{dsfont}

\RequirePackage{mathtools}

% ------------------------------------------------
% Simple Symbols & Shorthands
% ------------------------------------------------

% 
% Some Symbols
% 
\newcommand{\Hs}{\mathscr{H}} % Hilbert space

\newcommand\bit[1]{\texttt{#1}} % bit values, formatted possibly differently.

\newcommand{\Ident}{\mathds{1}}

% identity process
\def\IdentProc[#1][#2]#3{\operatorname{id}_{#1\notblank{#2}{\to #2}{}}\notblank{#3}{\left(#3\right)}{}}

% Lie Groups & Algebras
\def\su(#1){\mathrm{su}(#1)}
\def\SU(#1){\mathrm{SU}(#1)}
\def\so(#1){\mathrm{so}(#1)}
\def\SO(#1){\mathrm{SO}(#1)}


% some shortcuts for partial derivatives
\newcommand{\xdd}[2]{\frac{\partial #1}{\partial #2}}
\newcommand{\dd}[1]{\frac{\partial}{\partial #1}}

\def\ee^#1{e^{#1}} % we could imagine that in inlines, we replace this by exp()...

%
% Gates
%
\newcommand{\gate}[1]{\ifmmode\textsc{\lowercase{#1}}\else{\rmfamily\textsc{\lowercase{#1}}}\fi}
\newcommand{\AND}{\gate{And}}
\newcommand{\XOR}{\gate{Xor}}
\newcommand{\CNOT}{\gate{C-Not}}
\newcommand{\NOT}{\gate{Not}}


% ------------------------------------------------
% Math Operators
% ------------------------------------------------

\DeclareMathOperator{\tr}{tr}
\DeclareMathOperator{\supp}{supp}
\DeclareMathOperator{\rank}{rank}
\DeclareMathOperator{\Span}{span} % \span is already defined by latex
\DeclareMathOperator{\spec}{spec}
\DeclareMathOperator{\diag}{diag}
\let\phfqit@Re\Re
\DeclareMathOperator{\phfqit@Realpart}{Re}%
\renewcommand{\Re}{\phfqit@Realpart}
\let\phfqit@Im\Im
\DeclareMathOperator{\phfqit@Imagpart}{Im}%
\renewcommand{\Im}{\phfqit@Imagpart}




% ------------------------------------------------
% Bras, Kets, Norms, more delimiter stuff
% ------------------------------------------------

\DeclarePairedDelimiterX\ket[1]{\lvert}{\rangle}{{#1}}

\DeclarePairedDelimiterX\bra[1]{\langle}{\rvert}{{#1}}

\DeclarePairedDelimiterX\braket[2]{\langle}{\rangle}{%
  {#1}\hspace{0.2ex}\delimsize\vert\hspace{0.2ex}{#2}%
}

\DeclarePairedDelimiterX\ketbra[2]{\lvert}{\rvert}{%
  {#1}\delimsize\rangle\hspace{-0.25ex}\delimsize\langle{#2}%
}

\DeclarePairedDelimiterX\proj[1]{\lvert}{\rvert}{%
  {#1}\delimsize\rangle\hspace{-0.25ex}\delimsize\langle{#1}%
}

\DeclarePairedDelimiterX\matrixel[3]{\langle}{\rangle}{%
  {#1}\hspace{0.2ex}\delimsize\vert\hspace{0.2ex}{#2}\hspace{0.2ex}\delimsize\vert\hspace{0.2ex}{#3}%
}

\DeclarePairedDelimiterX\dmatrixel[2]{\langle}{\rangle}{%
  {#1}\hspace{0.2ex}\delimsize\vert\hspace{0.2ex}{#2}\hspace{0.2ex}\delimsize\vert\hspace{0.2ex}{#1}%
}

\DeclarePairedDelimiterX\innerprod[2]{\langle}{\rangle}{%
  {#1},\hspace{0.2ex}{#2}%
}

\DeclarePairedDelimiterX\abs[1]{\lvert}{\rvert}{{#1}}

\DeclarePairedDelimiterX\avg[1]{\langle}{\rangle}{{#1}}

\DeclarePairedDelimiterX\norm[1]{\lVert}{\rVert}{{#1}}



% ------------------------------------------------
% Entropies
% ------------------------------------------------


\newcommand\HHSym{H}
% 
% base formatting of entropy measure
% 
\newcommand\@@HHbase{%
  \HH@v@sym_{\HH@v@sub}^{\HH@v@epsilon}% H_min^eps
  %
  % if system is blank, we just want the symbol itself with no argument.
  %
  \expandafter\notblank\expandafter{\HH@v@sys}{%
    (%
    {\HH@v@sys}% target system
    \expandafter\notblank\expandafter{\HH@v@condsys}{\,|\,{\HH@v@condsys}}{}% conditioning system
    )%
    _{\HH@v@state}% the state as subscript, if any
  }{}%
  %
}

% usage: \@HHbase[symbol for "H"]{subscript for "H"}[state][epsilon]{"target" system name}[conditioning system name]
\newcommand\@HHbase@endwcond[1][]{%
  \def\HH@v@condsys{#1}%
  \@@HHbase%
  \endgroup% close group started by \@HHbase
}
\newcommand\@HHbase@contwepsilon[2][]{% #1=epsilon, #2="target system name"
  \def\HH@v@epsilon{#1}%
  \def\HH@v@sys{#2}%
  \@HHbase@endwcond%
}
\newcommand\@HHbase@contwstate[1][]{% #1=state
  \def\HH@v@state{#1}%
  \@HHbase@contwepsilon%
}
\newcommand\@HHbase[2][\HHSym]{%
  \begingroup% for our local def's
  \def\HH@v@sym{#1}%
  \def\HH@v@sub{#2}% subscript, e.g. \mathrm{min}  for H_min
  \@HHbase@contwstate%
}


% 
% Entropy commands usage: \HH[state][epsilon]{target system}[conditioning system]
% 
\newcommand\HH{\@HHbase{}}
\newcommand\Hzero{\@HHbase{\mathrm{max},0}}
\newcommand\Hmin{\@HHbase{\mathrm{min}}}
\newcommand\Hmaxf{\@HHbase{\mathrm{max}}}
%
% Entropy function:
%
\def\Hfunc(#1){%
  \HHSym({#1})%
}



% ------------------------------------------------
% Relative Entropies
% ------------------------------------------------


\newcommand\DDSym{D}


%
% \@DDbase@inner{rho}{Gamma}  -->  produces (\rho||\Gamma)
% \@DDbase@inner*{rho}{Gamma}  -->  produces \left(\rho||\Gamma\right)
% \@DDbase@inner[\big]{rho}{Gamma}  -->  produces \bigl(\rho||\Gamma\bigr)
%
\DeclarePairedDelimiterX\@DDbase@inner[2]{(}{)}{%
  #1\mathclose{}\,\delimsize\Vert\,\mathopen{}#2%
}

%
% \@DDbase  base macro for relative entropy macros.
%
% USAGE:
%
%   \@DDbase{D-symbol}{subscript}{superscript}<states-spec>
%
% with  <states-spec> =     {\rho}{\sigma}
%                       or  +*+{\rho}{\sigma}
%                       or  +\big+{\rho}{\sigma}
%                       or  *{\rho}{\sigma}
%                       or  [\big]{\rho}{\sigma}
% 
% Examples:
%
% \@DDbase{D-symbol}{subscript}{superscript}{\rho}{\Gamma}
% \@DDbase{D-symbol}{subscript}{superscript}*{\rho}{\Gamma} -> with \left( \right)
% \@DDbase{D-symbol}{subscript}{superscript}[\big]{\rho}{\Gamma} -> with \bigl( \bigr)
%
% and also alternative syntax, useful for higher-level macros which have already tons of [] options:
%
% \@DDbase{D-symbol}{subscript}{superscript}+*+{\rho}{\Gamma} -> with \left( \right)
% \@DDbase{D-symbol}{subscript}{superscript}+\big+{\rho}{\Gamma} -> with \bigl( \bigr)
%
%
\def\@DDbase#1#2#3{%
  #1_{#2}^{#3}%
  \@DDbase@parsesize%
}
\robustify\@DDbase

\def\@DDbase@parsesize{%
  \@ifnextchar+\@DDbase@withsize\@DDbase@inner%
}

\def\@DDbase@withsize+#1+{%
  \def\@tmp@arg{#1}%
  \def\@tmp@star{*}%
  \ifx\@tmp@arg\@tmp@star\relax%
    \def\tmp@cmd{\@DDbase@inner*}%
    \expandafter\tmp@cmd%
  \else%
    \def\tmp@cmd{\@DDbase@inner[#1]}%
    \expandafter\tmp@cmd%
  \fi%
}

%
% \DD{\rho}{\sigma}
% \DD*{\rho}{\sigma}
% \DD+\big+{\rho}{\sigma}
%
% i.e. \DD<states-spec>
%
% \DD^{superscript}<states-spec>
% \DD_{subscript}^{superscript}<states-spec>
%
% (see \@DDbase for <states-spec>)

\newcommand\DD{%
  \def\DD@tmp@sub{}%
  \def\DD@tmp@sup{}%
  \DD@%
}
\def\DD@{%
  \@ifnextchar_\DD@parsesub\DD@@%
}
\def\DD@@{%
  \@ifnextchar^\DD@parsesup\DD@@@%
}
\def\DD@@@{% sub/super-scripts have been parsed, move on to rest of command
  \@DDbase{\DDSym}{\DD@tmp@sub}{\DD@tmp@sup}%
}
\def\DD@parsesub_#1{%
  \def\DD@tmp@sub{#1}%
  \DD@% continue parsing maybe another sub or superscript
}
\def\DD@parsesup^#1{%
  \def\DD@tmp@sup{#1}%
  \DD@% continue parsing maybe another sub or superscript
}


%
% \DminF{\rho}{\sigma}
% \DminF[\epsilon]{\rho}{\sigma}
% \DminF<states-spec>
% \DminF[\epsilon]<states-spec>
%
% See \@DDbase for <states-spec>
% 
\newcommand\DminF[1][]{%
  \@DDbase{\DDSym}{\mathrm{min,F}}{#1}%
}

%
% \Dminz{\rho}{\sigma}
% \Dminz[\epsilon]{\rho}{\sigma}
% \Dminz<states-spec>
% \Dminz[\epsilon]<states-spec>
%
% See \@DDbase for <states-spec>
% 
\newcommand\Dminz[1][]{%
  \@DDbase{\DDSym}{\mathrm{min,0}}{#1}%
}

%
% \Dmax{\rho}{\sigma}
% \Dmax[\epsilon]{\rho}{\sigma}
% \Dmax<states-spec>
% \Dmax[\epsilon]<states-spec>
%
% See \@DDbase for <states-spec>
% 
\newcommand\Dmax[1][]{%
  \@DDbase{\DDSym}{\mathrm{max}}{#1}%
}

%
% \Dr{\rho}{\sigma}
% \Dr[\epsilon]{\rho}{\sigma}
% \Dr<states-spec>
% \Dr[\epsilon]<states-spec>
%
% See \@DDbase for <states-spec>
% 
\newcommand\Dr[1][]{%
  \@DDbase{\DDSym}{\mathrm{r}}{#1}%
}


%
% \DHyp{\rho}{\sigma}
% \DHyp[\eta]{\rho}{\sigma}
% \DHyp<states-spec>
% \DHyp[\eta]<states-spec>
%
% See \@DDbase for <states-spec>
% 
\newcommand\DHyp[1][\eta]{%
  \@DDbase{\DDSym}{\mathrm{H}}{#1}%
}



% -----------------------


%
% \DC@inner{rho}{Gamma1}{Gamma2}        -->  produces (rho||Gamma1,Gamma2)
% \DC@inner*{rho}{Gamma1}{Gamma2}       -->  produces \left(rho||Gamma1,Gamma2\right)
% \DC@inner[\big]{rho}{Gamma1}{Gamma2}  -->  produces \bigl(rho||Gamma1,Gamma2\bigr)
%
% If rho starts with the token *, then adds the subscript in \DC@tmp@rhosub to rho
%
\DeclarePairedDelimiterX\DC@inner[3]{(}{)}{%
  #1\mathclose{}\,\delimsize\Vert\,\mathopen{}#2\mathclose{},\mathopen{}#3%
}


%
% Symbol to use for the coherent relative entropy
%
\newcommand\DCSym{\bar\DDSym}

%
% Designates the trivial system (uses symbol for empty set)
%
\def\emptysystem{\ensuremath{\emptyset}}


%
% Coherent Relative Entropy.
%
% USAGE:
%
%   \DCond[\epsilon]{\rho}{R}{X'}{\Gamma_R}{\Gamma_{X'}}
%   \DCond[\epsilon]{*\sigma_R\otimes\rho_{X'}}{R}{X'}{\Gamma_R}{\Gamma_{X'}}
%   \DCond[\epsilon]<size-spec>{\rho}{R}{X'}{\Gamma_R}{\Gamma_{X'}}
%   \DCond[\epsilon]<size-spec>{*\sigma_R\otimes\rho_{X'}}{R}{X'}{\Gamma_R}{\Gamma_{X'}}
%
%   with an optional <size-spec> =  "+*+"  or  "+\Big+"
%

\newcommand\DCond[1][]{%
  \def\DC@tmp@sup{#1}%
%\message{*********|\detokenize{#1}|*********}%
  \DC@parsesize%
}

\def\DC@parsesize#1{%
  \def\DC@tmp@sizeargs{}%
  \ifstrequal{#1}{+}\DC@withsize{\DC@rest{#1}}%
%  \@ifnextchar+\DC@withsize\DC@rest%
}

\def\DC@withsize#1+{%
%\message{*********\detokenize{#1}********}%
  \def\@tmp@arg{#1}%
  \def\@tmp@star{*}%
  \ifx\@tmp@arg\@tmp@star\relax%
    \def\DC@tmp@sizeargs{*}%
    \expandafter\DC@rest%
  \else%
    \def\DC@tmp@sizeargs{[#1]}%
    \expandafter\DC@rest%
  \fi%
}

\def\DC@rest#1#2#3#4#5{% #1=rho, #2=system-in, #3=system-out, #4=Gamma_in, #5=Gamma_out
%\message{*********\detokenize{#1}|\detokenize{#2}|\detokenize{#3}|\detokenize{#4}|\detokenize{#5}|********}%
  \def\DC@tmp@rho{\DC@fmtrhosub#1\DC@ENDSTATE{#2}{#3}}%
  \DCSym_{#2\to #3}^{\DC@tmp@sup}%
  \expandafter\DC@inner\DC@tmp@sizeargs{\DC@tmp@rho}{#4}{#5}%
}

\def\DC@fmtrhosub{%
  \@ifnextchar*\DC@fmtrhosub@nosub\DC@fmtrhosub@wsub%
}
\def\DC@fmtrhosub@nosub*#1\DC@ENDSTATE#2#3{%
  #1%
}
\def\DC@fmtrhosub@wsub#1\DC@ENDSTATE#2#3{%
  \begingroup%
    \let\emptysystem\relax%
    #1_{#3#2}%
  \endgroup%
}


