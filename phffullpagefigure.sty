
\NeedsTeXFormat{LaTeX2e}
\ProvidesPackage{phffullpagefigure}[2016/02/24 phffullpagefigure package]


\RequirePackage{etoolbox}
\RequirePackage{ifoddpage}
\RequirePackage{afterpage}

\RequirePackage{placeins} % \FloatBarrier



%
% \begin{fullpagefigure}
%   % figure contents:
%   \figcontents{ ... commands to create the full-page figure, e.g. \includepdf{} command(s). ... }
%   % OR: shorthand for \figcontents{\includepdf[options]{pdf-file}}
%   \figpdf[options]{pdf-file}
%
%   % more full-page figure options
%   \fig*** ...
%
%   % Caption and label
%   \caption{The figure caption goes here}
%   \label{fig:some-label}
% \end{fullpagefigure}
%
% NOTE: The environment should be placed at the beginning of a paragraph, or on its own
% paragraph.
%
% Possible \fig*** option commands:
%
% \figpageside{odd}, \figpageside{}, \figpageside{even}  if the document is two-side, then
%   specify the side the figure should appear on.  Use an empty argument to use either
%   side.
%
% \figplacement{b|t|p} figure caption placement, as for usual LaTeX floats. b=bottom,
%   t=top, p=full page.  If you specify [p], do NOT combine it with any other option.  You
%   may leave the argument empty to use defaults.
%
%   The figure placement can also be specified as an optional argument to the environment.
%
% \figcapmaxheight{length}  the estimated height of the caption.  This is used to see
%   whether the figure caption fits on the current page.
%
% \caption, \label  use as usual for figures.
%
% \figcontents{LaTeX commands}  specify a set of LaTeX commands to execute within an
%   \afterpage{} command, in order to generate a full-page figure.  For example you might
%   want to execute one or several \includepdf{} command(s) here.
%
% \figpdf[options]{pdf-file}  shorthand for \figcontents{\includepdf[options]{pdf-file}}
%
%
%
% The figure label in the caption may be changed (e.g. "Figure X (on facing page): ") by
% redefining the command \fullpagefigurecaptionfmt.  See the default implementation for
% more info.
%
%
% \FlushAllFullPageFigures - issue this command whenever you need to make sure that all
% full-page figures have been placed up to this point.  An optional argument
% \FlushAllFullPageFigures[\clearpage] or \FlushAllFullPageFigures[\cleardoublepage]
% specifies whether to continue on any page or on an odd-side page only.
% 
%
%
% PACKAGE OPTIONS
%
% [nopdfpages]  -- don't load the package {pdfpages}, and don't provide the \figpdf{}
%                  command.
%


\newcounter{phffpf@internal@pending}
\setcounter{phffpf@internal@pending}{0}

%
% Redefine this if you don't want to use a \FloatBarrier.  Be warned that:
%
% - \FloatBarrier introduces automatically a new paragraph.  Nothing you can do about
%   that a priori.
%
% - If you remove \FloatBarrier, you need to either be sure that there are no floats
%   which can mess up placement of the fullpagefigure, or you need to provide your own
%   mechanism that ensures that.
%
\def\phffpfFloatBarrier{\FloatBarrier}




%
% The main {fullpagefigure} environment.
%
\newenvironment{fullpagefigure}[1][b]{% 
  %
  % Remember that we have a float pending to be placed
  %
  \addtocounter{phffpf@internal@pending}{1}%
  %
  % Don't allow any other floats to meddle with our calculations.
  % 
  \phffpfFloatBarrier%
%[YYY]% -- debugging [where is a space being inserted?]
  %
  % These variables will store the relevant values of options collected in the definition
  % of the figure with e.g. \figplacement, \figcontents, etc.
  % 
  % If you add a @val@ storage variable, don't forget to fix that value in "doplacefigure"
  % 
  \xdef\phffpf@val@pageside{\phffpf@side@}%
  \gdef\phffpf@val@captionopt{}%
  \gdef\phffpf@val@caption{}%
  \gdef\phffpf@val@label{}%
  \gdef\phffpf@val@placement{#1}%  figure caption at 'bottom' of previous page, by default.
  \gdef\phffpf@val@capmaxheight{\paperheight}%  TODO: this should be automatically calculated from caption
  \gdef\phffpf@val@figcontents{}%
  % 
  % If this document has facing pages (odd/even pages), then by default place the float on
  % an odd page.
  %
  \if@twoside%
    \xdef\phffpf@val@pageside{\phffpf@side@odd}%
  \else\fi%
  %
  % Provide option-value-setting commands within this figure block
  %
  \begingroup%
  \let\figcontents\phffpf@impl@figcontents%
  \let\figpageside\phffpf@impl@figpageside%
  \let\caption\phffpf@impl@caption%
  \let\label\phffpf@impl@label%
  \let\figplacement\phffpf@impl@placement%
  \let\figcapmaxheight\phffpf@impl@capmaxheight%
  \phffpf@provide@figpdf% provide \figpdf as a shorthand, if appropriate
  %
  % Finally, ignore any spaces following this command
  %
  \ignorespacesafterend%
  \ignorespaces%
}{%
  % 
  % End environment.
  %
  %
  % Remove any spaces which might have been inserted.
  %
  \ifhmode\unskip\fi%
  % 
  % Restore \caption & \label and etc.
  %
  \endgroup%
  %
  % 
  % Finally we should actually place the figure.
  % 
  \phffpf@takecareofplacingfigure%
  %
  %
  % Finally, ignore any spaces following this command.  Note that because the expansion
  % of \endfullpagefigure is inside the definition of LaTeX' "\end" and has internal
  % commands after that, we can't just have here \ignorespaces.
  %
  \phfpf@useignorespacesandallpars%  \phffpf@ignorespacesnewlines%
}


% see http://tex.stackexchange.com/a/179034/32188  and  http://tex.stackexchange.com/a/23101/32188
\def\phfpf@useignorespacesandallpars#1\ignorespaces\fi{%
  #1\fi\phffpf@ignorespacesandallpars}
%
\def\phffpf@ignorespacesandallpars{%
  \begingroup%
  \catcode`\^^M=10\relax%
  \catcode`\^^J=10\relax%
  \@ifnextchar\par%
    {\endgroup\expandafter\phffpf@ignorespacesandallpars\@gobble}%
    {\endgroup}%
}

\newtoks\phffpf@tmp@toks
\def\phffpf@impl@figcontents#1{%
  \phffpf@tmp@toks={#1}%
  \xdef\phffpf@val@figcontents{\the\phffpf@tmp@toks}%
  \ignorespaces%
}


\def\phffpf@side@odd{O}
\def\phffpf@side@even{E}
\def\phffpf@side@{x}

\def\phffpf@impl@figpageside#1{%
  \ifcsname phffpf@side@#1\endcsname%
    \xdef\phffpf@val@pageside{\csname phffpf@side@#1\endcsname}%
  \else%
    \PacakgeError{phffullpagefigure}{Unknown page side designation: '#1'. Please use 'odd',
      'even', or '' for no preference.}%
  \fi%
  \ignorespaces%
}

\def\phffpf@NOARG{}
\def\phffpf@test@NOARG{\phffpf@NOARG}

\newcommand\phffpf@impl@caption[2][\phffpf@NOARG]{%
  \gdef\phffpf@val@captionopt{#1}%
  \gdef\phffpf@val@caption{#2}%
  \ignorespaces%
}

\def\phffpf@impl@label#1{%
  \gdef\phffpf@val@label{#1}%
  \ignorespaces%
}

\def\phffpf@impl@placement#1{%
  \gdef\phffpf@val@placement{#1}%
  \ignorespaces%
}

\def\phffpf@impl@capmaxheight#1{%
  \gdef\phffpf@val@capmaxheight{#1}%
  \ignorespaces%
}



\def\fullpagefigurecaptionfmt#1{%
  \figurename\nobreakspace\thefigure\nobreakspace(\csname fullpagefigurecaptionfmt@paren@#1\endcsname)%
}
\def\fullpagefigurecaptionfmt@paren@O{on facing page} % for odd page figures
\def\fullpagefigurecaptionfmt@paren@E{on next page}   % for even page figures
\def\fullpagefigurecaptionfmt@paren@x{on next page}   % for next-page figures


%
% this macro will store code to be executed after the next figure has been placed.  This
% can be used to queue other figures to place later.
%
\def\phffpf@place@pending@figs@code{\phffpf@place@pending@figs@code@start}

\def\phffpf@place@pending@figs@code@start{\gdef\phffpf@place@pending@figs@code{\phffpf@place@pending@figs@code@start}}

%
% The code to be inserted to generate the figure.
%
\gdef\phffpf@impl@figcode#1{%  #1 = prefix macro for fields as \csname #1@FIELD\endcsname
  \expandafter\ifblank\expandafter{\csname #1@placement\endcsname}{% don't have placement arg
    \edef\phffpf@tmp@figplacementarg{}%
  }{% have placement arg
    \edef\phffpf@tmp@figplacementarg{[\csname #1@placement\endcsname]}%
  }
  \expandafter\figure\phffpf@tmp@figplacementarg%
  \centering%
  \begingroup%
  % [FIGURE GHOST CONTENT: \csname #1@caption\endcsname]
  \def\fnum@figure{\fullpagefigurecaptionfmt{\csname #1@pageside\endcsname}}%
  \expandafter\afterpage\expandafter{\csname #1@figcontents\endcsname}%
  \expandafter\ifx\csname #1@captionopt\endcsname\phffpf@test@NOARG%
    \expandafter\caption\expandafter{\csname #1@caption\endcsname}%
  \else%
    \def\phffpf@tmp@captioncmdopt{\expandafter\caption\expandafter[\csname #1@captionopt\endcsname]}%
    \expandafter\phffpf@tmp@captioncmdopt\expandafter{\csname #1@caption\endcsname}%
  \fi%
  \expandafter\notblank\expandafter{\csname #1@label\endcsname}{%
    \expandafter\label\expandafter{\csname #1@label\endcsname}%
  }{%
  }
  \endgroup%
  \endfigure%
  % 
  % We have placed the figure, so decrease our "pending" counter
  % 
  \addtocounter{phffpf@internal@pending}{-1}%
  %
  % and add code to place any other pending figures.
  %
  \afterpage{%
%    [PLACING PENDING FIGURES: \arabic{phffpf@internal@pending}]  % -- DEBUGGING
%    \texttt{\detokenize\expandafter{\phffpf@place@pending@figs@code}}%  -- DEBUGGING
    \phffpf@flag@forcenextmaybequeuetoplacefiguretrue%
    \phffpf@place@pending@figs@code%
  }%
}%



\def\phffpf@takecareofplacingfigure{%
  %
  % Now, all options have been set etc., the fullpagefigure environment has finished, so
  % calculate the commands to place the figure appropriately.
  %
  %
  % Prepare some code which should be placed on the page immediately preceeding the full
  % page figure.
  % 
%[PLACING FIGURE ON PAGE SIDE \phffpf@valname{pageside}] % -- for debugging
  %
  %
  % Here's the tricky part: make sure we save the values of phffpf@val@<FIELD> in a fixed
  % way so that several figures won't overwrite each other's values.
  %
  \edef\phffpf@tmp@fixallfieldvalues{%  \phffpf@tmp@fixallfieldvalues expands once to a
    % list of commands "\gdef\phffpf@val@FIELD{value-of-the-field}"
    \noexpand\gdef\noexpand\phffpf@val@pageside{\expandonce\phffpf@val@pageside}%
    \noexpand\gdef\noexpand\phffpf@val@captionopt{\expandonce\phffpf@val@captionopt}%
    \noexpand\gdef\noexpand\phffpf@val@caption{\expandonce\phffpf@val@caption}%
    \noexpand\gdef\noexpand\phffpf@val@label{\expandonce\phffpf@val@label}%
    \noexpand\gdef\noexpand\phffpf@val@placement{\expandonce\phffpf@val@placement}%
    \noexpand\gdef\noexpand\phffpf@val@capmaxheight{\expandonce\phffpf@val@capmaxheight}%
    \noexpand\gdef\noexpand\phffpf@val@figcontents{\expandonce\phffpf@val@figcontents}%
%    \phffpf@impl@fixfieldvaluecode{pageside}%
%    \phffpf@impl@fixfieldvaluecode{captionopt}%
%    \phffpf@impl@fixfieldvaluecode{caption}%
%    \phffpf@impl@fixfieldvaluecode{label}%
%    \phffpf@impl@fixfieldvaluecode{placement}%
%    \phffpf@impl@fixfieldvaluecode{capmaxheight}%
%    \phffpf@impl@fixfieldvaluecode{figcontents}%
  }%
  \edef\phffpf@tmp@figcodetwoargs{%
    {\expandonce\phffpf@tmp@fixallfieldvalues}%
    {\noexpand\phffpf@impl@figcode{phffpf@val}}%
  }%
  %
%\show\phffpf@tmp@figcode %% DEBUG
  %
  \expandafter\phffpf@maybequeuefigurecode\phffpf@tmp@figcodetwoargs%
}

\newif\ifphffpf@flag@forcenextmaybequeuetoplacefigure
\phffpf@flag@forcenextmaybequeuetoplacefigurefalse

\long\def\phffpf@maybequeuefigurecode#1#2{%
  % #1 = code to restore correct phffpf@val@XYZ values
  % #2 = figure code. Make sure it's expanded
  %
  % See if there are other figures waiting to be placed first.  If so, queue ours.
  % 
  \ifphffpf@flag@forcenextmaybequeuetoplacefigure%
    %
    % reset flag ...
    % 
    \phffpf@flag@forcenextmaybequeuetoplacefigurefalse
    % 
    % and deal with placing the figure now.
    %
    \phffpf@doplacefigure{#1}{#2}%
    %
%    [FORCED figure placed: \texttt{\detokenize{#1}}] % DEBUGGING
  \else
    \ifnum\value{phffpf@internal@pending}>1\relax% other figure waiting to be placed.
      % 
      % add to queue
      %
      \xdef\phffpf@place@pending@figs@code{%
          \expandonce\phffpf@place@pending@figs@code%
          \unexpanded{\phffpf@maybequeuefigurecode{#1}{#2}}%
        }%
%      \show\phffpf@place@pending@figs@code
%        [figure queued:  \texttt{\detokenize{#1}}]%  -- DEBUGGING
        %
    \else
      %
      % deal with placing the figure now.
      %
      \phffpf@doplacefigure{#1}{#2}%
      %
%      [figure placed: \texttt{\detokenize{#1}}]  -- DEBUGGING
    \fi
  \fi%
}

\long\def\phffpf@doplacefigure#1#2{%
  % #1 = code to restore correct phffpf@val@XYZ values
  % #2 = figure code. Make sure it's expanded
  %
  % Make sure the correct values of phffpf@val@XYZ are restored, because we need
  % e.g. \phffpf@val@pageside.  They may be wrong because this might be called after a
  % figure has been queued.
  % 
  #1%
  % 
  % Now, determine where exactly to place the figure code.  There are no other pending
  % figures.
  %
  \ifx\phffpf@val@pageside\phffpf@side@%
    %
    % No side preference.
    %
    % Just place the figure pretty much now.
    %
    \let\phffpf@tmp@doplace\@firstofone%
    %
  \else%
    %
    % We have a side preference.  So check everything carefully.
    %
    \ifx\phffpf@val@pageside\phffpf@side@odd%
%[CHECK DONE HERE/WANT ODD] % -- for debugging
      \checkoddpage\ifoddpage%
%[IS ODD] % -- for debugging
        \let\phffpf@tmp@doplace\phffpf@placecode@onotherparity%
      \else%
%[IS NOT ODD] % -- for debugging
        \let\phffpf@tmp@doplace\phffpf@placecode@onsameparity%
      \fi%
    \else%
%[CHECK DONE HERE/WANT EVEN] % -- for debugging
      \checkoddpage\ifoddpage%
%[IS ODD] % -- for debugging
        \let\phffpf@tmp@doplace\phffpf@placecode@onsameparity%
      \else%
%[IS NOT ODD] % -- for debugging
        \let\phffpf@tmp@doplace\phffpf@placecode@onotherparity%
      \fi%
    \fi%
  \fi%
  % 
  % 
  % I think an \hbox{} might help to place the anchor which determines which page this is
  % on. --- No, it inserts a blank paragraph (WHY??) -- SHOULD BE FIXED NOW
  % 
  \leavevmode\hbox{}%
  %
  % Now, do place the figure somewhere.
  % 
  \phffpf@tmp@doplace{#1#2}%
}


\newdimen\phffpf@tmp@spaceleft
\newdimen\phffpf@tmp@compareto

\long\def\phffpf@placecode@onsameparity#1{%
  % 
  % First, see if the caption requires to be full-page [and thus no height calculations
  % are necessary, and an additional clearpage is required]
  % 
  \def\@tmpa{p}%
  \ifx\phffpf@val@placement\@tmpa%
    %
    % place caption on page of its own -- use an additional \clearpage for that.
    %
    \afterpage{\vspace*{0pt}\afterpage{#1\clearpage}}%
    %
  \else%
    %
    % Figure caption is there along with some text on the page.
    %
    % 
    % See if there is enough place left on this page to place the figure caption; otherwise
    % use two \afterpage's
    % 
%[PLACING FIG CODE ON SAME PARITY]% -- debugging
    % 
    \phffpf@tmp@spaceleft=\textheight\relax%
    \phffpf@tmp@compareto=\phffpf@val@capmaxheight\relax%
    \advance\phffpf@tmp@spaceleft by -\pagetotal%
%    [DIM LEFT: \the\phffpf@tmp@spaceleft]%
    \ifdim\phffpf@tmp@spaceleft>\phffpf@tmp@compareto%
      % 
      % Enough space left on page, don't use two `afterpage`'s.
      %
%      [ENOUGH DIM LEFT.] % -- debugging
      #1%\phffpf@tmp@figcode%
    \else%
      % Not enough space, use two \afterpage's
%      [*NOT ENOUGH* DIM LEFT.] % -- debugging
      \afterpage{\vspace*{0pt}\afterpage{#1}}%
    \fi%
    %
  \fi%
}

\def\phffpf@placecode@onotherparity#1{%
  %
  % Place the figure code after the current page.
  %
%[PLACING FIG CODE ON OTHER PARITY]% -- debugging
  % 
  % 
  % First, see if the caption requires to be full-page [and thus no height calculations
  % are necessary, and an additional clearpage is required]
  % 
  \def\@tmpa{p}%
  \ifx\phffpf@val@placement\@tmpa%
    %
    % place caption on page of its own -- use an additional \clearpage for that.
    %
    \afterpage{#1\clearpage}%
    %
  \else%
    %
    % Figure caption is there along with some text on the page.
    %
    \afterpage{#1}%
    % 
  \fi%
}









%
% Command which can be used to ensure that all full-page figure floats have been placed.
%

\newcommand\FlushAllFullPageFigures[1][\phffpf@clearpage]{%  optional arg: clear page command
  \ifnumcomp{\value{phffpf@internal@pending}}{>}{0}{%
    \clearpage% clear page, possibly placing the figure.
%    [page cleared.]% DEBUG
    \FlushAllFullPageFigures[#1]% recurse again.
  }{% all figures placed, all fine.  Still need to flush one last time because at this
    % point the figure code (ie. caption) has been placed only, and we want the text that
    % follows to come after the figure itself.
    #1%
  }%
}

\def\phffpf@clearpage{\if@twoside\cleardoublepage\else\clearpage\fi}



\def\phffpf@provide@figpdf{}

\newcommand\phffpf@impl@figpdf[2][]{%
  \figcontents{\includepdf[#1]{#2}}%
}

\def\phffpf@do@pdfpages{%
  \RequirePackage{pdfpages}%
  \def\phffpf@provide@figpdf{\let\figpdf\phffpf@impl@figpdf}%
}



\DeclareOption{nopdfpages}{\def\phffpf@do@pdfpages{}}
\DeclareOption*{%
  \@unknownoptionerror%
}
\ProcessOptions\relax


\phffpf@do@pdfpages
