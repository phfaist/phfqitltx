% \iffalse meta-comment
%
% Copyright (C) 2016 by Philippe Faist <philippe.faist@bluewin.ch>
% -------------------------------------------------------
% 
% This file may be distributed and/or modified under the
% conditions of the LaTeX Project Public License, either version 1.3
% of this license or (at your option) any later version.
% The latest version of this license is in:
%
%    http://www.latex-project.org/lppl.txt
%
% and version 1.3 or later is part of all distributions of LaTeX 
% version 2005/12/01 or later.
%
% \fi
%
% \iffalse
%<*driver>
\ProvidesFile{phfparen.dtx}
%</driver>
%<package>\NeedsTeXFormat{LaTeX2e}[2005/12/01]
%<package>\ProvidesPackage{phfparen}
%<*package>
    [2016/05/04 v1.0 phfparen package]
%</package>
%
%<*driver>
\documentclass{ltxdoc}
\usepackage{xcolor}
\usepackage{phfparen}
\usepackage[preset=xpkgdoc]{phfnote}
\EnableCrossrefs         
\CodelineIndex
\RecordChanges
\begin{document}
  \DocInput{phfparen.dtx}
\end{document}
%</driver>
% \fi
%
% \CheckSum{0}
%
% \CharacterTable
%  {Upper-case    \A\B\C\D\E\F\G\H\I\J\K\L\M\N\O\P\Q\R\S\T\U\V\W\X\Y\Z
%   Lower-case    \a\b\c\d\e\f\g\h\i\j\k\l\m\n\o\p\q\r\s\t\u\v\w\x\y\z
%   Digits        \0\1\2\3\4\5\6\7\8\9
%   Exclamation   \!     Double quote  \"     Hash (number) \#
%   Dollar        \$     Percent       \%     Ampersand     \&
%   Acute accent  \'     Left paren    \(     Right paren   \)
%   Asterisk      \*     Plus          \+     Comma         \,
%   Minus         \-     Point         \.     Solidus       \/
%   Colon         \:     Semicolon     \;     Less than     \<
%   Equals        \=     Greater than  \>     Question mark \?
%   Commercial at \@     Left bracket  \[     Backslash     \\
%   Right bracket \]     Circumflex    \^     Underscore    \_
%   Grave accent  \`     Left brace    \{     Vertical bar  \|
%   Right brace   \}     Tilde         \~}
%
%
% \changes{v1.0}{2016/04/20}{Initial version}
%
% \GetFileInfo{phfparen.dtx}
%
% \DoNotIndex{\newcommand,\newenvironment,\def,\gdef,\edef,\xdef,\if,\else,\fi,\ifx}
% 
% \title{The \pkgname{phfparen} package\thanks{\itshape
% This document corresponds to
% \pkgname{phfparen}~\fileversion, dated \filedate. It is part of
% the Part of the
% \href{https://github.com/phfaist/phfqitltx/}{\pkgname{phfqitltx}}
% package suite, see \url{https://github.com/phfaist/phfqitltx}.}}
% \author{Philippe Faist\quad\email{philippe.faist@bluewin.ch}}
%
% \maketitle
%
% \begin{abstract}
%   \pkgname{phfparen}---Short description.
% \end{abstract}
%
% \inlinetoc
%
% \section{Introduction}
%
% User documentation goes here.
%
% WRITE ME ........................
%
%
%
%
% \StopEventually{\vskip 3cm plus 2cm minus 2cm\relax\PrintChanges
%     \vskip 3cm plus 2cm minus 2cm\relax\PrintIndex}
%
% \section{Implementation}
%
%    \begin{macrocode}
\RequirePackage{etoolbox}
\RequirePackage{xparse}

\RequirePackage{amsmath}

\RequirePackage{mathtools}


% ------------------------------------------------
% Advanced Parenthetic Expressions.
% ------------------------------------------------

%
% \paren(expression in parenthesis)
% \paren[expression in brackets]
% \paren\{expression in curly braces\}
% \paren*[expression in \left[...\right]]
% \paren\big[expression in \lbig[..\rbig]]
% \paren{ expression in curly braces }  % alternative syntax for curly braces
%
% Examples (` is interchangeable with \paren if [backtickon] package option is given):
%
%     \log\paren( a + \sin(x) - y)
%     \log`( a + \sin(x) - y)
%     \log`*( \sum_k`\big[ a_k^\dagger - a_k ] )
%     F = `\big< f(x) >_x = `*< \sum g(`<p>) >
%     `\Big[\sum_j `[x]^2 - \sum [y]^2 + \sum f`*(x_3^\dagger)^2]
%     `(z + \backtick x)  % verbatim backtick
%     `{\vec z}
%     `*{ \vec z : \sum_i z_i = 1 }
%     `\big{ \vec z : \sum_i z_i = 1 }
%

% syntax is: \paren<modifier-token><delimited-argument>  where modifier-token is optional and can be *
\def\paren{%
  \@ifnextchar\bgroup\paren@impl@bgroup\paren@impl@nobgroup%
}
\def\paren@impl@bgroup{%
  %
  % Special treatment for curly braces (or whatever we have by default)
  %
  % Go directly. (We know the argument follows in the input token chain.)
  % 
  \csname paren@impl@\paren@registered@default @go\endcsname%
}
\def\paren@impl@nobgroup#1{%
  %
  % See if #1 is <delimited-argument>. Do that by seeing if #1 is a known and
  % registered delimiter, see if \paren@registered@delims@<delimiter-token-as-string>
  % is defined.
  % 
  \ifcsdef{paren@registered@delims@\string#1}{%
    % this is a known delimiter
    \paren@impl@nomod{#1}%
  }{%
    % this is not a known delimiter, assume it's a modifier-token
    \paren@impl@mod{#1}%
  }%
}
\def\paren@impl@nomod#1{% argument is the recognized <delimiter-token>.
  %
  % \paren@registered@delims@<delimiter-token-as-string> should be defined to be the
  % internal name of the registered delimiter.
  %
  \letcs\paren@tmp@delimname{paren@registered@delims@\string#1}%
  % 
  % call the implementation for that delimiter with the modifier-token as argument.
  % 
  \def\paren@impl@tmp@delimtoken{#1}%
  \csname paren@impl@\paren@tmp@delimname\endcsname{}#1%
  % 
}
\def\paren@impl@mod#1{% argument is {modifier-token}
  \def\paren@tmp@modtoken{#1}%
%\show\paren@tmp@modtoken
  \@ifnextchar\bgroup\paren@impl@modBgroup\paren@impl@modNobgroup%
}

\def\paren@impl@modBgroup{%
  %
  % Special treatment for curly braces (or whatever we have by default)
  %
  % Parse the given modifiers:
  \paren@util@parseModifs\paren@tmp@modifsForMathtools\paren@tmp@modtoken%
  % 
  \letcs\paren@tmp@gocmd{paren@impl@\paren@registered@default @go}%
  %
  % and Go! (we know the argument follows in the input token chain)
  %
  \expandafter\paren@tmp@gocmd\paren@tmp@modifsForMathtools%
}

\def\paren@impl@modNobgroup#1{% argument is {delimiter?}
%\message{(((((((((([\noexpand#1]))))))))))}%
  %
  % Check that the given delimiter is known and
  % registered. \paren@registered@delims@<delimiter-token-as-string>
  % should be defined to be the internal name of the registered delimiter.
  %
  \ifcsdef{paren@registered@delims@\string#1}{%
    \letcs\paren@tmp@delimname{paren@registered@delims@\string#1}%
    %
    % call the implementation for that delimiter with the modifier-token as argument, and
    % the delimiter to start parsing.
    % 
    \def\paren@impl@tmp@delimtoken{#1}%
    \letcs\paren@tmp@delimcmd{paren@impl@\paren@tmp@delimname}%
    \edef\paren@tmp@modtokenarg{{\expandonce{\paren@tmp@modtoken}}}%
    \expandafter\paren@tmp@delimcmd\paren@tmp@modtokenarg#1%
    %
  }{%
    \PackageError{phfqit}{Unknown delimiter: (or can't parse args?)
      {\expandafter\string\paren@tmp@modtoken}{\string#1}}{Your call to \string\paren
      couldn't be parsed, presumably because I didn't recognize your delimiter, or because
      there's a bug in this package.}%
    % 
    \paren@tmp@modtoken#1% attempt to recover by keeping all args as text tokens ...
  }%
}

% 
% defines macro-name to contain mathtools-compatible modifs args.  <modifs> is expanded
% once, so it is expected to be a macro which contains the relevant modifiers.
% 
\def\paren@util@parseModifs#1#2{%  {macro-name}{modifs}
  % 
  \expandafter\ifstrequal\expandafter{#2}{*}{%
    \def\paren@tmp@star{*}%
    \def\paren@tmp@sqmodifs{}%
  }{%
    \def\paren@tmp@star{}%
    \expandafter\ifblank\expandafter{#2}{%
      \def\paren@tmp@sqmodifs{}%
    }{%
      \edef\paren@tmp@sqmodifs{[\expandonce{#2}]}%
    }%
  }%
  \edef#1{\expandonce\paren@tmp@star\expandonce\paren@tmp@sqmodifs}%
%\show#1%%%%%
}


\def\paren@xparsefix@storeparenarg#1{% #1 = paren argument;
  % use \paren@impl@tmp@delimtoken is the delimiter token;
  % store final value in \paren@tmp@contents
  \def\paren@tmp@contents{#1}%
}

\@ifpackagelater{xparse}{2015/11/04}{% "too recent" version of package: has bug when using
                                     % macros as delimiter tokens
  % 
  % BUG in recent xparse version: when using macros as delimiters: need to strip macro
  % length from beginning of argument
  % 
  \RequirePackage{xstring}%
  %
  \def\paren@xparsefix@storeparenarg#1{%
    \fullexpandarg\StrLen{\expandafter\string\paren@impl@tmp@delimtoken}[\paren@tmp@delimstrlen]%
    \ifnum\paren@tmp@delimstrlen=1\relax%
      \def\paren@tmp@contents{#1}%
    \else%
      \def\paren@tmp@delimstrlen@{\numexpr\paren@tmp@delimstrlen-1\relax}%
      \noexpandarg\StrGobbleLeft{#1}{\the\paren@tmp@delimstrlen@}[\paren@tmp@contents]%
    \fi%
  }%
}{%
  % old xparse: macro delimiters won't work.
}


%
% Helper to register a delimiter set for use with \paren.
%
% This function defines \paren@registered@delims@<open-delimiter-token-as-string> to be
% the internal registered <name> for this delimiter. Then, defines \paren@impl@<name>
% which is a parser for this delimiter and calls the mathtools goodies
% etc. \paren@impl@<name> takes one mandatory argument, which is all the stuff to insert
% before the open delimiter and to pass on to mathtools (just a * or a delimiter size),
% and then reads the delimited (balanced) content.
%
% This macro should only be called in the preamble.
%
\def\paren@register#1#2#3#4#5{% {name}{open-delim-macro}{close-delim-macro}{open-delim-output}{close-delim-output}
  %
  % Use mathtools util
  %
  \expandafter\DeclarePairedDelimiterX\csname paren@impl@#1@go\endcsname[1]{#4}{#5}{{##1}}

%  \csdef{paren@impl@#1@goDEBUG}##1##2##3##4{%
%\show\paren@impl@tmp@modifs
%\toks0={##1}
%\message{==========\the\toks0==========}
%\message{========#2==\noexpand{\detokenize{##2}}==#3========}
%    **##1**/**##2**/**##3**/**##4**%
%  }

  \expandafter\DeclareDocumentCommand\csname paren@impl@#1@parsedelim\endcsname{r#2#3}{%
    \letcs\paren@impl@tmp@gocmd{paren@impl@#1@go}%
%\message{********MESSAGE*********}%
%\message{**********\detokenize\expandafter{\paren@impl@tmp@modifs}**********}%
%\message{**********\detokenize{##1}***********}%
    \paren@util@parseModifs\paren@impl@tmp@modifsForMathtools\paren@impl@tmp@modifs%
%\show\paren@impl@tmp@modifsForMathtools%
    \paren@xparsefix@storeparenarg{##1}%
%
%\show\paren@impl@tmp@modifsForMathtools
%\show\paren@tmp@contents
    \expandafter\paren@impl@tmp@gocmd\paren@impl@tmp@modifsForMathtools{\paren@tmp@contents}%##1}%
  }

  \csdef{paren@impl@#1}##1{%  ##1=modifiers
    \gdef\paren@impl@tmp@modifs{##1}%
    \csname paren@impl@#1@parsedelim\endcsname%
  }

  % register this open delimiter to be detected by the parent \paren macro
  \csdef{paren@registered@delims@\string#2}{#1}
}

%
% Specify the internal name for the delimiter which should be used in the syntax `{...} or \paren{...}.
%
% This macro may be called multiple times, the last specified name is used.
%
\def\parenRegisterDefault#1{%
  \def\paren@registered@default{#1}%
}

%
% Register parens.
%

\def\paren@setup@registerDefaults{
  \paren@register{parens}{(}{)}{(}{)}
  \paren@register{brackets}{[}{]}{[}{]}
  \paren@register{angbrackets}{<}{>}{\langle}{\rangle}
  \paren@register{braces}{\{}{\}}{\{}{\}}
  % the registered paren type to use when given the syntax \paren{...}: use curly braces.
  \parenRegisterDefault{braces}
}

\def\normalbacktick{\mathcode`\`="0060\relax}

\def\parenMakeBacktickActiveParen{%
  \def\backtick{\begingroup\normalbacktick`\endgroup}%
%  \catcode`\`=\active%  don't change catcode, only mathcode so this works in inline formulae, too.
  % lccode-trick to do "\def`{...}" but for active "`" char
  \begingroup%
  \lccode`\~=`\`%
  \lowercase{\endgroup\def~}{\paren}%
  \mathcode`\`="8000\relax%  active mathcode
}
\def\parenMakeBacktickActiveParenInMathMode{%
  \parenMakeBacktickActiveParen%
}


\DeclareOption{backtickon}{
  \parenMakeBacktickActiveParenInMathMode
}
\DeclareOption{noregisterdefaults}{
  \def\paren@setup@registerDefaults{}
}
\DeclareOption*{
  \PackageError{phfparen}{Unknown option `\CurrentOption'. 
    Available options are backtickon and noregisterdefaults.}
}
\ProcessOptions\relax


\paren@setup@registerDefaults


%    \end{macrocode}
%
%\Finale
\endinput
